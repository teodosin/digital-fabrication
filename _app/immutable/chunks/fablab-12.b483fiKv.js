import{s as Ct,e as o,a as s,H as _t,c as l,g as r,b as a,j as yt,k as It,h as n,f as Y,d as Pt,i,n as Z}from"./scheduler.WqRDolvd.js";import{S as Tt,i as Ht}from"./index.0NVKo1ab.js";function kt(xt){let p,$="Table of Contents",M,h,tt='<li><a href="#assignment">Assignment</a></li> <li><a href="#group">Group</a></li> <li><a href="#research">Research</a></li> <li><a href="#button-print">Button Print</a></li> <li><a href="#button-to-motor">Button to Motor</a></li>',E,u,et="Assignment",S,d,A,gt=`<code class="language-undefined">Group assignment

* Join a introduction session to get an overview of networking possibilities with XIAO ESP32
* Pick a group leader who is going to populate the group assignment page

Individual assignment

* Link to the group assignment page and describe what did you learn individually.
* Explore the WiFi capabilities of the XIAO ESP32C3 board.
* Plug it into one of the boards you produced earlier.
* Program the XIAO board to spawn an Access Point and create a simple REST API.
* The REST API should have endpoints for controlling output device(s) of your board as well as reading input.
* Document as you go and publish content on a page on your documentation website.</code>`,j,m,nt="Group",R,f,it="Research",B,c,ot='Still going with Rust, building on the experience from the last two test programs on the <a href="fablab-08">ESP32-C3</a> and <a href="fablab-09">ESP32-S3</a> respectively. This week the intent was to get these boards to talk to each other. Simply, pressing the button on the C3 board should activate the motor on the S3 board.',G,w,lt='Because of my choice of programming language, I couldn’t directly follow the instructions on the Xiao getting started guides. So my starting point was the <a href="https://github.com/esp-rs/awesome-esp-rust" rel="nofollow">Awesome ESP Rust</a> repository, which would hopefully have example projects.',X,v,st='The relevant crate for wifi and so on is <a href="https://github.com/esp-rs/esp-wifi" rel="nofollow">esp-wifi</a>. It’s actual <a href="https://github.com/esp-rs/esp-wifi/blob/main/esp-wifi/README.md" rel="nofollow">README</a> is of course highly relevant.',q,b,at='The crate has an <a href="https://github.com/esp-rs/esp-wifi/blob/main/esp-wifi/examples/access_point.rs" rel="nofollow">example for creating an Access Point</a>.',D,x,rt="Let’s break down the task a bit. No need to immediately jump to board-to-board communication. Let’s first try to print a message to the computer screen every time the button is pressed.",O,g,pt="Button Print",z,C,ht="The process to get code to compile was painful. There were so many errors and dead ends, and I was so tunnel-visioned to get it to work that I didn’t take time to document.",F,_,ut="I eventually did get the example codes from esp-wifi to compile and run, and I was able to connect the ESP32 to my wifi network. I didn’t manage, however, to do anything with that connection. I also tried running the bluetooth example, but couldn’t connect to the device. So I’m condensing maybe two days worth of work into these two disappointing paragraphs.",N,y,dt='I looked elsewhere. I found <a href="https://dev.to/apollolabsbin/embedded-rust-bluetooth-on-esp-ble-scanner-1gb7" rel="nofollow">a tutorial series</a> that seemed promising. It was only under two months old and really in depth. The only downside was that there was seemingly no no_std option.',J,I,mt="I implemented the code for the unsecure BLE client. After lots of config and wrestling with the compiler:",U,P,ft,W,T,ct="It seems like I managed to connect to the chip with my phone.",K,H,wt='At this point in the process, time had marched on and the next assignment was presented, <a href="fablab-13">application programming</a>. I moved to doing that, as it was more urgent for my final project. I made progress such that I was able to send data from the chip to my pc. That made this initial button test obsolete, so I could move on to making the button do something more interesting.',Q,k,vt="Button to Motor",V,L,bt="I would next attempt to connect the two boards to each other using the espnow protocol. I imagined it would be more straightforward than bluetooth or wifi.";return{c(){p=o("h3"),p.textContent=$,M=s(),h=o("ul"),h.innerHTML=tt,E=s(),u=o("h1"),u.textContent=et,S=s(),d=o("pre"),A=new _t(!1),j=s(),m=o("h1"),m.textContent=nt,R=s(),f=o("h1"),f.textContent=it,B=s(),c=o("p"),c.innerHTML=ot,G=s(),w=o("p"),w.innerHTML=lt,X=s(),v=o("p"),v.innerHTML=st,q=s(),b=o("p"),b.innerHTML=at,D=s(),x=o("p"),x.textContent=rt,O=s(),g=o("h1"),g.textContent=pt,z=s(),C=o("p"),C.textContent=ht,F=s(),_=o("p"),_.textContent=ut,N=s(),y=o("p"),y.innerHTML=dt,J=s(),I=o("p"),I.textContent=mt,U=s(),P=o("img"),W=s(),T=o("p"),T.textContent=ct,K=s(),H=o("p"),H.innerHTML=wt,Q=s(),k=o("h1"),k.textContent=vt,V=s(),L=o("p"),L.textContent=bt,this.h()},l(t){p=l(t,"H3",{"data-svelte-h":!0}),r(p)!=="svelte-sbwzft"&&(p.textContent=$),M=a(t),h=l(t,"UL",{"data-svelte-h":!0}),r(h)!=="svelte-2yafdu"&&(h.innerHTML=tt),E=a(t),u=l(t,"H1",{"data-svelte-h":!0}),r(u)!=="svelte-g9rspt"&&(u.textContent=et),S=a(t),d=l(t,"PRE",{class:!0});var e=yt(d);A=It(e,!1),e.forEach(n),j=a(t),m=l(t,"H1",{"data-svelte-h":!0}),r(m)!=="svelte-kxioer"&&(m.textContent=nt),R=a(t),f=l(t,"H1",{"data-svelte-h":!0}),r(f)!=="svelte-1lm3rdx"&&(f.textContent=it),B=a(t),c=l(t,"P",{"data-svelte-h":!0}),r(c)!=="svelte-dgg4jp"&&(c.innerHTML=ot),G=a(t),w=l(t,"P",{"data-svelte-h":!0}),r(w)!=="svelte-neszod"&&(w.innerHTML=lt),X=a(t),v=l(t,"P",{"data-svelte-h":!0}),r(v)!=="svelte-1ml3dqh"&&(v.innerHTML=st),q=a(t),b=l(t,"P",{"data-svelte-h":!0}),r(b)!=="svelte-1thneiu"&&(b.innerHTML=at),D=a(t),x=l(t,"P",{"data-svelte-h":!0}),r(x)!=="svelte-8e6n8y"&&(x.textContent=rt),O=a(t),g=l(t,"H1",{"data-svelte-h":!0}),r(g)!=="svelte-x5ocs3"&&(g.textContent=pt),z=a(t),C=l(t,"P",{"data-svelte-h":!0}),r(C)!=="svelte-8inp2t"&&(C.textContent=ht),F=a(t),_=l(t,"P",{"data-svelte-h":!0}),r(_)!=="svelte-1rs0iaf"&&(_.textContent=ut),N=a(t),y=l(t,"P",{"data-svelte-h":!0}),r(y)!=="svelte-1ocimfj"&&(y.innerHTML=dt),J=a(t),I=l(t,"P",{"data-svelte-h":!0}),r(I)!=="svelte-15hnhj6"&&(I.textContent=mt),U=a(t),P=l(t,"IMG",{src:!0,alt:!0}),W=a(t),T=l(t,"P",{"data-svelte-h":!0}),r(T)!=="svelte-pm6j9a"&&(T.textContent=ct),K=a(t),H=l(t,"P",{"data-svelte-h":!0}),r(H)!=="svelte-akdnd1"&&(H.innerHTML=wt),Q=a(t),k=l(t,"H1",{"data-svelte-h":!0}),r(k)!=="svelte-1jke9ne"&&(k.textContent=vt),V=a(t),L=l(t,"P",{"data-svelte-h":!0}),r(L)!=="svelte-19rt9e9"&&(L.textContent=bt),this.h()},h(){A.a=null,Y(d,"class","language-undefined"),Pt(P.src,ft="fab12/01.png")||Y(P,"src",ft),Y(P,"alt","connection success")},m(t,e){i(t,p,e),i(t,M,e),i(t,h,e),i(t,E,e),i(t,u,e),i(t,S,e),i(t,d,e),A.m(gt,d),i(t,j,e),i(t,m,e),i(t,R,e),i(t,f,e),i(t,B,e),i(t,c,e),i(t,G,e),i(t,w,e),i(t,X,e),i(t,v,e),i(t,q,e),i(t,b,e),i(t,D,e),i(t,x,e),i(t,O,e),i(t,g,e),i(t,z,e),i(t,C,e),i(t,F,e),i(t,_,e),i(t,N,e),i(t,y,e),i(t,J,e),i(t,I,e),i(t,U,e),i(t,P,e),i(t,W,e),i(t,T,e),i(t,K,e),i(t,H,e),i(t,Q,e),i(t,k,e),i(t,V,e),i(t,L,e)},p:Z,i:Z,o:Z,d(t){t&&(n(p),n(M),n(h),n(E),n(u),n(S),n(d),n(j),n(m),n(R),n(f),n(B),n(c),n(G),n(w),n(X),n(v),n(q),n(b),n(D),n(x),n(O),n(g),n(z),n(C),n(F),n(_),n(N),n(y),n(J),n(I),n(U),n(P),n(W),n(T),n(K),n(H),n(Q),n(k),n(V),n(L))}}}const Et={title:"Networking",date:"2024-05-05",description:"The twelfth assignment.",categories:["projects"],tags:["digital-fabrication"],cover:"fab12/01.png"};class St extends Tt{constructor(p){super(),Ht(this,p,null,kt,Ct,{})}}export{St as default,Et as metadata};
