import{s as hp,e as p,a as o,H as w,c as e,g as u,b as c,j as y,k as b,h as s,f as l,d as i,i as t,n as Ea}from"./scheduler.WqRDolvd.js";import{S as wp,i as yp}from"./index.0NVKo1ab.js";function bp(pp){let g,Ia="Table of Contents",Vn,_,Ta='<li><a href="#assignment">Assignment</a></li> <li><a href="#group">Group</a></li> <li><a href="#concept">Concept</a></li> <li><a href="#process">Process</a><ul><li><a href="#ble">BLE</a></li> <li><a href="#mux">MUX</a></li> <li><a href="#arduino">Arduino</a></li></ul></li> <li><a href="#code">Code</a><ul><li><a href="#arduino-1">Arduino</a></li> <li><a href="#bevy">Bevy</a></li> <li><a href="#esp32-rust">ESP32 Rust</a></li></ul></li>',Nn,v,Pa="Assignment",zn,x,jn,ep=`<code class="language-undefined">Group assignment
* Join one of the introduction sessions.
* Elect a group leader.
* Document hands-on exercise with available interface examples.
* Optionally discuss an additional example that you have used in the past or wish to explore.

Individual assignment
* Link to the group assignment page.
* Describe what you learned from the group assignment on your documentation page briefly.
* Write an application that interfaces a user with an input and/or output device that you made.
* Include a hero video and source files of the application in your documentation.</code>`,qn,C,Sa="Group",Xn,E,Aa="Group assignment this week was handled by Miro Keimiöniemi (link pending)",Yn,I,La="Concept",Zn,T,Ma='The agenda for this week was to set up the initial working version of the debug app for my final project, <a href="fablab-00">the gloves</a>.',Jn,P,Ba='I chose the Rust based <a href="https://bevyengine.org/" rel="nofollow">Bevy game engine</a> for this project. Using it feels more like using a framework than an engine, really, since there’s no standalone editor or other executable that you run to make things. Instead, you add it as a dependency like any other crate in your project. If using a game engine sounds like overkill for a simple app, you can pick and choose only the features your project needs, making it potentially quite lightweight.',Qn,S,Ha='To use this engine, you of course would need Rust installed on your machine. I’m using the <a href="https://rustup.rs/" rel="nofollow">Rustup</a> tool to manage Rust installations.',Kn,A,Da='Then you would be best served by following along with the <a href="https://bevyengine.org/learn/quick-start/getting-started/" rel="nofollow">Bevy book</a>. Create a rust project, add Bevy as a dependency, and then add Bevy’s recommended optimisations to the cargo.toml file. It’s all explained in the book.',$n,L,Ra="I’ve used Bevy before, but never anything async or with networking. Those aspects would be new to me and useful for my future projects using the engine.",ns,M,Oa='For the code going into the ESP32, I first thought I’d be following the tutorials mentioned in the <a href="fablab-12">previous assignment post</a>. The ESP32 was going to be here, at first, an <a href="https://dev.to/apollolabsbin/embedded-rust-bluetooth-on-esp-ble-server-1no8" rel="nofollow">unsecure BLE server.</a>. There were however some compiler issues that I was unable to solve at first. So in the interest of time I opted for <a href="https://github.com/bjoernQ/bleps" rel="nofollow">Bleps</a>, which I did manage to get working sooner.',ss,B,Wa='For the code going into the Bevy app, I need two things. First, a library to handle connecting to bluetooth devices. The one I found and got working was <a href="https://github.com/deviceplug/btleplug" rel="nofollow">btleplug</a>. Since that crate seemed to heavily use async, I also needed <a href="https://github.com/EkardNT/bevy-tokio-tasks/tree/master" rel="nofollow">bevy-tokio-tasks</a> to provide better async support for Bevy. That crate was somewhat old but it was relatively trivial to update to work with the latest version of Bevy.',as,H,Fa="Process",ts,D,Ua="There was a lot of frustration while getting these things to work. I didn’t document all the struggles with the compiler, as there’s way too many individual stumbling blocks there to effectively list here. Things to do with choosing the correct compilation targets, reconciling incompatible dependencies between examples found online etc. Instead I’ll start with the debugging I did with the bluetooth connection, and then the multiplexer. Final working code will be appended at the end of this post once it is, well, working.",ps,R,Ga="BLE",es,O,Va="BLE = Bluetooth Low Energy.",os,W,Na="Once the Bevy app and embedded program were up, I tried getting them to connect to each other. Eventually, it was successful, and I was able to send some hard-coded messages from the ESP32 to the Bevy app via bluetooth.",cs,F,za,us,U,ja="The connection was highly unreliable, and I didn’t know why. There were issues with timeouts and local connection aborts that I didn’t know how to debug. So let’s attempt to make sense of some of them.",ls,G,is,op=`<code class="language-undefined">Starting scan on hci0 (usb:v1D6Bp0246d0540)...
Peripheral &quot;Ruka&quot; is connected: false
Connecting to peripheral &quot;Ruka&quot;...
Error connecting to peripheral, skipping: Service discovery timed out</code>`,ks,V,qa="Service discovery timed out.",rs,N,Xa="(WIP)",ds,z,Ya="MUX",ms,j,Za='This was the first time I tried programming the <a href="fablab-10">input board</a>. I was behind on that assignment and getting the physical board finished, so I didn’t have time to test it until this week. And when testing, it seemed there were problems with the multiplexer.',fs,q,Ja,hs,X,Qa="I wasn’t at the lab when I encountered all these issues, so I had to improvise a bit with the debugging. The input board didn’t have an LED, but my previously designed board did. I connected the two boards with alligator clips and poked around to see which pins and traces were being powered and which weren’t.",ws,Y,Ka="For reference, here is the PCB footprint of the board. I was mostly testing the thumb flex sensor connected to sockets labeled <code>J1</code>. I had a piece of code that read the value on the analog pin, which was connected to the multiplexer. At one point I cycled through all the possible selector values and read the output from all of the multiplexer pins, and none of them were reacting to the flex sensor.",ys,Z,$a,bs,J,nt="The intended circuit was that the power is first drawn from the <code>5V</code> pin, lead through the <code>R1</code> resistor, then the flex sensor at <code>J1</code> (which is a variable resistor, essentially) and then to ground. The route to the multiplexer pin <code>A4</code> in the corner of the mux starts from between the two resistors. My understanding is that which resistor is on the power side and which on the ground side doesn’t really matter, since I’ve seen sources with both setups.",gs,Q,st="I later learned that this type of circuit is called a <code>voltage divider</code>.",_s,K,at="The first issue was quickly found and easily fixed. I had selected the wrong pins to be the selector pins for the multiplexer. I only noticed when I connected a pin that wasn’t being used at all to the LED, and it lit up. It was being used as one of the selectors. Unfortunately, switching to the correct selector pins wasn’t enough to fix the issue.",vs,$,tt='The second thing I checked was whether there was power coming out of the flex sensor circuit. There wasn’t, at least not enough to turn on the LED. There was power going into the resistor <code>R1</code>, lighting up the LED brightly. The trace after the resistor lit it up dimly, and the trace after the flex sensor, not at all. So one hypothesis for what could be wrong is that the resistance is too much and there isn’t anything left for the analog pin to measure. The resistor is 47k0hms, a value that was recommended by <a href="https://learn.sparkfun.com/tutorials/flex-sensor-hookup-guide/all" rel="nofollow">this source</a> for example. <a href="https://www.youtube.com/watch?v=_tXWoplbqWo" rel="nofollow">This video</a> has the order of resistors flipped, and an even higher Ohm resistor. It seemed unlikely that this was the issue, but I couldn’t rule it out just yet.',xs,nn,pt="The multiplexer has a pin labeled <code>!E</code>, which is the enable pin. When that pin is powered, the entire multiplexer is off. So it should be unpowered for the circuit to work. I had connected that pin, as well as the Ground and Negative Power pins all to ground.",Cs,sn,et="Finally I tried to measure the com pin on the multiplexer to see if it could output any power.",Es,an,ot="This was all desperate work, and in hindsight I don’t think I understood how the multiplexer should be debugged. Back at the lab I got help, and we went to the oscilloscope to properly look at the voltages.",Is,tn,ct,Ts,k,ut="",lt,Ps,r,it="",kt,Ss,pn,rt="Yeah. Turned out the circuits were fine. There was a 2V difference in the voltage of the analog pin when the flex sensor was bent. So the problem had to be in the software.",As,en,dt="I tried for several more hours to get the analog reading to work. No matter what library I tried or what function, something somewhere broke. I couldn’t get the libraries to compiler, or the correct features enabled. So I gave up on using Rust for this. The ecosystem was far too immature in the end, and I don’t have even close to the required programming knowledge to compensate.",Ls,on,mt="Arduino",Ms,cn,ft="I went back to Arduino. I expected to be able to immediately utilise out-of-the-box solutions for the BLE and analog pins. But of course there were issues.",Bs,un,ht="First issue turned out insurmountable. Trying to read analog signals with the ESP32 led to the serial monitor printing just “ADC2 is not supported”. Turned out there’s an actual hardware design flaw in the ESP32 that makes its better Analog to Digital Converter unreliable and off by default. Supposedly it was possible to force it on, but I simply couldn’t figure out how to do it with the Arduino IDE, since it doesn’t support sdkconfig files or other env variable settings. Also couldn’t find how to switch to the more coarse ADC1. Stuck, again.",Hs,ln,wt="I was told about an alternative to the ESP32, the nrf52 microcontroller. It boasted 6 analog input pins, making a multiplexer unnecessary. Its bluetooth connection was touted as highly reliable, more so than the ESP. Additionally, its Sense version had a built-in accelerometer and gyroscope. What a marvel.",Ds,kn,yt="I implemented the minimal code to get the flex sensor inputs. There was one more speedbump though. During compilation, the IDE couldn’t find the <code>adafruit-nrfutils</code>package despite it being installed and added to the <code>PATH</code> variable. But running the IDE with sudo (as admin) fixed that, and behold:",Rs,d,bt="",gt,Os,rn,_t="As you can see, it maxes out soon at 1023. This indicated that too much voltage was ending up at the analog pin, and therefore the power-side resistor was too low.",Ws,dn,vt,Fs,mn,xt="I got to borrow a breadboard to test out different resistor values. The one on my board was 47kOhms. Testing a few I landed on 180kOhms being a good value. No matter how much the flex sensor was bent or straightened, the voltage stayed in range.",Us,fn,Ct="It didn’t cover the whole range though, so I initially thought I needed some sort of voltage magnification before the input pin. But then I researched and discovered that the nrf52’s analog pins were <strong>14bit</strong> precision, meaning it could measure up to <strong>16384</strong> different values. Losing a few thousand from each end was no issue at all.",Gs,hn,Et="I also tried the built-in IMU with modified example code:",Vs,m,It="",Tt,Ns,wn,Pt="Amazing. I also discovered that the exact IMU on the nrf52 was the same one as the breakout IMU I had, showing that my concerns about it being a downgrade were unfounded. For the second glove board iteration, I could get rid of both the multiplexer and external IMU.",zs,yn,St="Now, the process for getting the flex data sent over bluetooth to the Bevy app was arduous and full of stumbling blocks.",js,bn,At=`The main resources I was continually referring to:
<a href="https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/bluefruit-nrf52-api" rel="nofollow">Adafruit Bluefruit library for the nRF52 (works on the Xiao nRF52 too)</a> <a href="https://learn.adafruit.com/bluefruit-nrf52-feather-learning-guide/blecharacteristic" rel="nofollow">Bluefruit’s Characteristic Documentation</a> <a href="https://github.com/adafruit/Adafruit_nRF52_Arduino/blob/0ed4d9ffc674ae407be7cacf5696a02f5e789861/libraries/Bluefruit52Lib/src/BLEUuid.h#L109" rel="nofollow">Standard UUID’s for BLE Services and Characteristics</a> <a href="https://www.nordicsemi.com/Products/Development-tools/nRF-Connect-for-mobile" rel="nofollow">nRF Connect app</a>`,qs,gn,Lt="For many hours I was struggling with getting my custom service and characteristics to show up in my Bevy app, despite the connection being fine and all the other characteristics showing up. My custom characteristics were also visible just fine on nRF Connect. For whatever reason, changing the UUID for my service to something else fixed the issue. It seemed like the btleplug library was picky about the UUIDs it could recognise.",Xs,f,Mt="",Bt,Ys,_n,Ht="Code",Zs,vn,Dt="Arduino code first, then the Rust code. The unused and incomplete Rust ESP32 code is at the bottom.",Js,xn,Rt="Arduino",Qs,Cn,Ot="The Arduino code is in three files. The file concerning most BLE functionality is mostly from a Bluefruit example, but I added a custom service and characteristic to it. The other two files are the main file and the flex sensor setup.",Ks,En,Wt="This code only sends the reading of one flex sensor over Bluetooth, but it should be trivial to include the rest as well as the IMU readings for the final project. The function mapping various pins to multiplexer selector values will also be made redundant when the 2nd PCB design is produced, but hopefully it can be useful as a reference for working with the multiplexer in code.",$s,In,na,cp=`<code class="language-cpp"><span class="token comment">// main.ino</span>

<span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">115200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">flex_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">ble_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Forward data from HW Serial to BLEUART</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// Delay to wait for enough input, since we have a limited transmission buffer</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bleuart<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> buf<span class="token punctuation">,</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Forward from BLEUART to HW Serial</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> bleuart<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">uint8_t</span> ch<span class="token punctuation">;</span>
    ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span> bleuart<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  
  <span class="token function">flex_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,sa,Tn,aa,up=`<code class="language-cpp"><span class="token comment">// ble.ino</span>
<span class="token comment">// Based on an Adafruit Bluefruit example </span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bluefruit.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Adafruit_LittleFS.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;InternalFileSystem.h></span></span>


<span class="token comment">// Create the custom flex sensor service</span>
BLEService flexSensorService <span class="token operator">=</span> <span class="token function">BLEService</span><span class="token punctuation">(</span><span class="token number">0x2222</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x1812</span>

<span class="token comment">// Create the custom flex sensor characteristic</span>
BLECharacteristic flexChar <span class="token operator">=</span> <span class="token function">BLECharacteristic</span><span class="token punctuation">(</span>UUID16_CHR_GENERIC_LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0x2AF9</span>


<span class="token comment">// BLE Service</span>
BLEDfu  bledfu<span class="token punctuation">;</span>  <span class="token comment">// OTA DFU service</span>
BLEDis  bledis<span class="token punctuation">;</span>  <span class="token comment">// device information</span>
BLEUart bleuart<span class="token punctuation">;</span> <span class="token comment">// uart over ble</span>
BLEBas  blebas<span class="token punctuation">;</span>  <span class="token comment">// battery</span>

<span class="token keyword">void</span> <span class="token function">ble_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">CFG_DEBUG</span></span>
  <span class="token comment">// Blocking wait for connection when debug mode is enabled via IDE</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token operator">!</span>Serial <span class="token punctuation">)</span> <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>
  
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bluefruit52 BLEUART Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------------&#92;n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token comment">// Setup the BLE LED to be enabled on CONNECT</span>
  <span class="token comment">// Note: This is actually the default behavior, but provided</span>
  <span class="token comment">// here in case you want to control this LED manually via PIN 19</span>
  Bluefruit<span class="token punctuation">.</span><span class="token function">autoConnLed</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Config the peripheral connection with maximum bandwidth </span>
  <span class="token comment">// more SRAM required by SoftDevice</span>
  <span class="token comment">// Note: All config***() function must be called before begin()</span>
  Bluefruit<span class="token punctuation">.</span><span class="token function">configPrphBandwidth</span><span class="token punctuation">(</span>BANDWIDTH_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Bluefruit<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Bluefruit<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Ruka"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Bluefruit<span class="token punctuation">.</span><span class="token function">setTxPower</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Check bluefruit.h for supported values</span>
  <span class="token comment">//Bluefruit.setName(getMcuUniqueID()); // useful testing with multiple central connections</span>
  Bluefruit<span class="token punctuation">.</span>Periph<span class="token punctuation">.</span><span class="token function">setConnectCallback</span><span class="token punctuation">(</span>connect_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Bluefruit<span class="token punctuation">.</span>Periph<span class="token punctuation">.</span><span class="token function">setDisconnectCallback</span><span class="token punctuation">(</span>disconnect_callback<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// To be consistent OTA DFU should be added first if it exists</span>
  bledfu<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Configure and Start Device Information Service</span>
  bledis<span class="token punctuation">.</span><span class="token function">setManufacturer</span><span class="token punctuation">(</span><span class="token string">"Adafruit Industries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bledis<span class="token punctuation">.</span><span class="token function">setModel</span><span class="token punctuation">(</span><span class="token string">"Bluefruit Feather52"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  bledis<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Configure and Start BLE Uart Service</span>
  bleuart<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token comment">// Start BLE Battery Service</span>
  blebas<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  blebas<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Configure and Start the custom flex sensor service</span>
  flexSensorService<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Setup and add the custom flex sensor characteristic.</span>
  <span class="token comment">// It is automatically added to the last service that was begun. </span>
  flexChar<span class="token punctuation">.</span><span class="token function">setProperties</span><span class="token punctuation">(</span>CHR_PROPS_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>
  flexChar<span class="token punctuation">.</span><span class="token function">setPermission</span><span class="token punctuation">(</span>SECMODE_OPEN<span class="token punctuation">,</span> SECMODE_NO_ACCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
  flexChar<span class="token punctuation">.</span><span class="token function">setMaxLen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  flexChar<span class="token punctuation">.</span><span class="token function">setUserDescriptor</span><span class="token punctuation">(</span><span class="token string">"flex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  flexChar<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Set up and start advertising</span>
  <span class="token function">startAdv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">startAdv</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Advertising packet</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">addFlags</span><span class="token punctuation">(</span>BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE<span class="token punctuation">)</span><span class="token punctuation">;</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">addTxPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Include bleuart 128-bit uuid</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>bleuart<span class="token punctuation">)</span><span class="token punctuation">;</span>

  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span>flexSensorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// Secondary Scan Response packet (optional)</span>
  <span class="token comment">// Since there is no room for 'Name' in Advertising packet</span>
  Bluefruit<span class="token punctuation">.</span>ScanResponse<span class="token punctuation">.</span><span class="token function">addName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">/* Start Advertising
   * - Enable auto advertising if disconnected
   * - Interval:  fast mode = 20 ms, slow mode = 152.5 ms
   * - Timeout for fast mode is 30 seconds
   * - Start(timeout) with timeout = 0 will advertise forever (until connected)
   * 
   * For recommended advertising interval
   * https://developer.apple.com/library/content/qa/qa1931/_index.html   
   */</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">restartOnDisconnect</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// in unit of 0.625 ms</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">setFastTimeout</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// number of seconds in fast mode</span>
  Bluefruit<span class="token punctuation">.</span>Advertising<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 0 = Don't stop advertising after n seconds  </span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">send_flex</span><span class="token punctuation">(</span><span class="token keyword">int</span> flex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
  <span class="token comment">// Convert the 14-bit value to a 16-bit unsigned integer</span>
  <span class="token keyword">uint16_t</span> flexValue <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint16_t</span><span class="token punctuation">)</span>flex<span class="token punctuation">;</span>

  <span class="token comment">// Create a byte array to store the 16-bit value</span>
  <span class="token keyword">uint8_t</span> flexData<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  flexData<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>flexValue <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// High byte (8 most significant bits)</span>
  flexData<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span><span class="token punctuation">(</span>flexValue <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Low byte (6 least significant bits)</span>

  <span class="token comment">// Send the flex sensor value as a byte array</span>
  flexChar<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>flexData<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>flexData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">ble_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Forward data from HW Serial to BLEUART</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>Serial<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token comment">// Delay to wait for enough input, since we have a limited transmission buffer</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">uint8_t</span> buf<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> Serial<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    bleuart<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span> buf<span class="token punctuation">,</span> count <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token comment">// Forward from BLEUART to HW Serial</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span> bleuart<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
  <span class="token punctuation">&#123;</span>
    <span class="token keyword">uint8_t</span> ch<span class="token punctuation">;</span>
    ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">uint8_t</span><span class="token punctuation">)</span> bleuart<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Serial<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// callback invoked when central connects</span>
<span class="token keyword">void</span> <span class="token function">connect_callback</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span> conn_handle<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token comment">// Get the reference to current connection</span>
  BLEConnection<span class="token operator">*</span> connection <span class="token operator">=</span> Bluefruit<span class="token punctuation">.</span><span class="token function">Connection</span><span class="token punctuation">(</span>conn_handle<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">char</span> central_name<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  connection<span class="token operator">-></span><span class="token function">getPeerName</span><span class="token punctuation">(</span>central_name<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>central_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Connected to "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>central_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * Callback invoked when a connection is dropped
 * @param conn_handle connection where this event happens
 * @param reason is a BLE_HCI_STATUS_CODE which can be found in ble_hci.h
 */</span>
<span class="token keyword">void</span> <span class="token function">disconnect_callback</span><span class="token punctuation">(</span><span class="token keyword">uint16_t</span> conn_handle<span class="token punctuation">,</span> <span class="token keyword">uint8_t</span> reason<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> conn_handle<span class="token punctuation">;</span>
  <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> reason<span class="token punctuation">;</span>

  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Serial<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Disconnected, reason = 0x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> HEX<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ta,Pn,pa,lp=`<code class="language-cpp"><span class="token comment">// flex.ino</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> flx <span class="token operator">=</span> D3<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> s2 <span class="token operator">=</span> D0<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> s1 <span class="token operator">=</span> D1<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> s0 <span class="token operator">=</span> D2<span class="token punctuation">;</span> 

<span class="token comment">// Filter class for reducing noise from the flex sensor. </span>
<span class="token comment">// Lower alpha values mean more smoothing. </span>
<span class="token keyword">class</span> <span class="token class-name">ExponentialFilter</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
  <span class="token keyword">float</span> alpha<span class="token punctuation">;</span>
  <span class="token keyword">float</span> filteredValue<span class="token punctuation">;</span>

<span class="token keyword">public</span><span class="token operator">:</span>
  <span class="token function">ExponentialFilter</span><span class="token punctuation">(</span><span class="token keyword">float</span> alpha<span class="token punctuation">,</span> <span class="token keyword">float</span> initialValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token operator">-></span>filteredValue <span class="token operator">=</span> initialValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">float</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">float</span> rawValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    filteredValue <span class="token operator">=</span> alpha <span class="token operator">*</span> rawValue <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> filteredValue<span class="token punctuation">;</span>
    <span class="token keyword">return</span> filteredValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">float</span> <span class="token function">getCurrentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> filteredValue<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

ExponentialFilter <span class="token function">flexFilter</span><span class="token punctuation">(</span><span class="token number">0.15</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">flex_setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  
  <span class="token function">pinMode</span><span class="token punctuation">(</span>flx<span class="token punctuation">,</span> INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// declare the sensorPin as an INPUT</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token function">pinMode</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">pinMode</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> OUTPUT<span class="token punctuation">)</span><span class="token punctuation">;</span>


  <span class="token function">set_selector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> s0<span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">analogReadResolution</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  Serial<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>Serial<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">flex_loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// read the value from the sensor:</span>
  <span class="token keyword">int</span> raw <span class="token operator">=</span> <span class="token function">analogRead</span><span class="token punctuation">(</span>flx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">int</span> smooth <span class="token operator">=</span> flexFilter<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Send the average sensor vWalue</span>
  Serial<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>smooth<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">send_flex</span><span class="token punctuation">(</span>smooth<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// Function that maps multiplexer pins to the correct selector values. </span>
<span class="token keyword">void</span> <span class="token function">set_selector</span><span class="token punctuation">(</span><span class="token keyword">int</span> pin<span class="token punctuation">,</span> <span class="token keyword">int</span> s0<span class="token punctuation">,</span> <span class="token keyword">int</span> s1<span class="token punctuation">,</span> <span class="token keyword">int</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>pin<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token comment">// A0</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token comment">// A1</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token comment">// A2</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token comment">// A3</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span> <span class="token comment">// A4</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span> <span class="token comment">// A5</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span> <span class="token comment">// A6</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> LOW<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span> <span class="token comment">// A7</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">digitalWrite</span><span class="token punctuation">(</span>s0<span class="token punctuation">,</span> HIGH<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ea,Sn,Ft="Bevy",oa,An,Ut="I wanted to learn how to use the [Bevy Hanabi] GPU particle plugin, so I started my project from their portal example.",ca,Ln,Gt,ua,h,Vt="",Nt,la,Mn,zt="You can see the simple app working in the video above. I was pressed for time, since it took so long to even get the data to transmit properly. So for this assignment, this simple circle and particle movement had to suffice. When the hardware portion of the final project was done, I could try to do something more interesting with the debug app.",ia,Bn,jt="The whole setup <em>might</em> be more complicated than it needs to be. Basically, the code that sets up and continually monitors the bluetooth connection has to be asynchronous, but the main Bevy thread has to be free to update its World (loaded data) every frame. The TokioTasksPlugin is there to allow for a new thread to be spawned for the bluetooth code, and for it to have access to the Bevy World to update the input resource. I suspect that this might lead to slowdown, since the World is likely blocked from being accessed from the other systems while the async thread is modifying a part of it. A ton of room for optimisation that I don’t know how to do just yet.",ka,Hn,ra,ip=`<code class="language-rust"><span class="token comment">// main.rs</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">asyncs</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">ble</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">particles</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">asyncs<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">TaskContext</span><span class="token punctuation">,</span> <span class="token class-name">TokioTasksPlugin</span><span class="token punctuation">,</span> <span class="token class-name">TokioTasksRuntime</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span>prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">btleplug<span class="token punctuation">::</span>api<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Central</span><span class="token punctuation">,</span> <span class="token class-name">Characteristic</span><span class="token punctuation">,</span> <span class="token class-name">Manager</span> <span class="token keyword">as</span> _<span class="token punctuation">,</span> <span class="token class-name">Peripheral</span><span class="token punctuation">,</span> <span class="token class-name">ScanFilter</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">btleplug<span class="token punctuation">::</span>platform<span class="token punctuation">::</span></span><span class="token class-name">Manager</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">particles<span class="token punctuation">::</span></span><span class="token class-name">ParticlePlugin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token class-name">Duration</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokio<span class="token punctuation">::</span></span>time<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">App</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">DefaultPlugins</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">TokioTasksPlugin</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">ParticlePlugin</span><span class="token punctuation">)</span>
        
        <span class="token punctuation">.</span><span class="token function">insert_resource</span><span class="token punctuation">(</span><span class="token class-name">RukaInput</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token punctuation">.</span><span class="token function">add_systems</span><span class="token punctuation">(</span><span class="token class-name">Startup</span><span class="token punctuation">,</span> connect<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token attribute attr-name">#[derive(Resource, Default)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">RukaInput</span> <span class="token punctuation">&#123;</span>
    init<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    fingers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u16</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">impl</span> <span class="token class-name">RukaInput</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token keyword">bool</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>init
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">set_init</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> init<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>init <span class="token operator">=</span> init<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">get_fingers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token punctuation">[</span><span class="token keyword">f32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> fingers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> finger<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token keyword">self</span><span class="token punctuation">.</span>fingers<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fingers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">*</span>finger <span class="token keyword">as</span> <span class="token keyword">f32</span> <span class="token operator">/</span> <span class="token number">16384.0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        fingers
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">update_fingers</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> new_fingers<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">u16</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>fingers <span class="token operator">=</span> new_fingers<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">update_finger</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">,</span> finger<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token keyword">u16</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> finger <span class="token operator">></span> <span class="token number">4</span> <span class="token punctuation">&#123;</span>
            <span class="token macro property">panic!</span><span class="token punctuation">(</span><span class="token string">"Finger index out of bounds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">self</span><span class="token punctuation">.</span>fingers<span class="token punctuation">[</span>finger<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span>runtime<span class="token punctuation">:</span> <span class="token class-name">ResMut</span><span class="token operator">&lt;</span><span class="token class-name">TokioTasksRuntime</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// do the bluetooth connection thingy</span>
    runtime<span class="token punctuation">.</span><span class="token function">spawn_background_task</span><span class="token punctuation">(</span>try_connect<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">try_connect</span><span class="token punctuation">(</span><span class="token keyword">mut</span> ctx<span class="token punctuation">:</span> <span class="token class-name">TaskContext</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> manager <span class="token operator">=</span> <span class="token class-name">Manager</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to create BLE manager"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> adapter_list <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">adapters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get adapter list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> adapter_list<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"No Bluetooth adapters found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> adapter <span class="token keyword">in</span> adapter_list<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Starting scan on &#123;&#125;..."</span><span class="token punctuation">,</span> adapter<span class="token punctuation">.</span><span class="token function">adapter_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get adapter info"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        
        adapter
            <span class="token punctuation">.</span><span class="token function">start_scan</span><span class="token punctuation">(</span><span class="token class-name">ScanFilter</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token keyword">await</span>
            <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Can't scan BLE adapter for connected devices..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token namespace">time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_secs</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> peripherals <span class="token operator">=</span> adapter<span class="token punctuation">.</span><span class="token function">peripherals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get peripherals"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> peripherals<span class="token punctuation">.</span><span class="token function">is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"->>> BLE peripheral devices were not found, sorry. Exiting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>

            <span class="token keyword">let</span> target_name <span class="token operator">=</span> <span class="token string">"Ruka"</span><span class="token punctuation">;</span>

            <span class="token comment">// All peripheral devices in range</span>
            <span class="token keyword">for</span> peripheral <span class="token keyword">in</span> peripherals<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">let</span> properties <span class="token operator">=</span> peripheral<span class="token punctuation">.</span><span class="token function">properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get peripheral properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> is_connected <span class="token operator">=</span> peripheral<span class="token punctuation">.</span><span class="token function">is_connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get connection status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">let</span> local_name <span class="token operator">=</span> properties
                    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span>local_name
                    <span class="token punctuation">.</span><span class="token function">unwrap_or</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"(peripheral name unknown)"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> local_name <span class="token operator">!=</span> target_name <span class="token punctuation">&#123;</span>
                    <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token macro property">println!</span><span class="token punctuation">(</span>
                    <span class="token string">"Peripheral &#123;:?&#125; is connected: &#123;:?&#125;"</span><span class="token punctuation">,</span>
                    local_name<span class="token punctuation">,</span> is_connected
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token operator">!</span>is_connected <span class="token punctuation">&#123;</span>
                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Connecting to peripheral &#123;:?&#125;..."</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span> peripheral<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span> <span class="token punctuation">&#123;</span>
                        <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Error connecting to peripheral, skipping: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">continue</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">let</span> is_connected <span class="token operator">=</span> peripheral<span class="token punctuation">.</span><span class="token function">is_connected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to get connection status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                
                <span class="token macro property">println!</span><span class="token punctuation">(</span>
                    <span class="token string">"Now connected (&#123;:?&#125;) to peripheral &#123;:?&#125;..."</span><span class="token punctuation">,</span>
                    is_connected<span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_name
                <span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Discover peripheral &#123;:?&#125; services..."</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>local_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                peripheral<span class="token punctuation">.</span><span class="token function">discover_services</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">"Failed to discover services"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                ctx<span class="token punctuation">.</span><span class="token function">run_on_main_thread</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>main_ctx<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">let</span> <span class="token keyword">mut</span> ruka <span class="token operator">=</span> main_ctx<span class="token punctuation">.</span>world<span class="token punctuation">.</span><span class="token function">get_resource_mut</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">RukaInput</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    ruka<span class="token punctuation">.</span><span class="token function">set_init</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>

                <span class="token keyword">while</span> is_connected <span class="token punctuation">&#123;</span>
                    <span class="token keyword">let</span> <span class="token keyword">mut</span> value<span class="token punctuation">:</span> <span class="token keyword">u16</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

                    <span class="token keyword">for</span> service <span class="token keyword">in</span> peripheral<span class="token punctuation">.</span><span class="token function">services</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">for</span> characteristic <span class="token keyword">in</span> service<span class="token punctuation">.</span>characteristics <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span> characteristic<span class="token punctuation">.</span>uuid<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">"00002af9-0000-1000-8000-00805f9b34fb"</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">continue</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                            
                            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Trying to read &#123;:?&#125;"</span><span class="token punctuation">,</span> characteristic<span class="token punctuation">.</span>uuid<span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token keyword">let</span> read_result <span class="token operator">=</span> peripheral<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>characteristic<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
                            <span class="token keyword">match</span> read_result <span class="token punctuation">&#123;</span>
                                <span class="token class-name">Ok</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                                    <span class="token keyword">if</span> data<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
                                        <span class="token keyword">let</span> high_byte <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                        <span class="token keyword">let</span> low_byte <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                            
                                        <span class="token comment">// Combine the high and low bytes to get the original 16-bit value</span>
                                        value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>high_byte <span class="token keyword">as</span> <span class="token keyword">u16</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>low_byte <span class="token keyword">as</span> <span class="token keyword">u16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Read bytes: &#123;:?&#125;"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    <span class="token punctuation">&#125;</span>
                                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"---------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                                <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                                    <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"Error reading characteristic: &#123;&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>

                    <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token class-name">Duration</span><span class="token punctuation">::</span><span class="token function">from_millis</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token namespace">tokio<span class="token punctuation">::</span>time<span class="token punctuation">::</span></span><span class="token function">sleep</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>

                    <span class="token keyword">if</span> is_connected <span class="token punctuation">&#123;</span>
                        ctx<span class="token punctuation">.</span><span class="token function">run_on_main_thread</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>main_ctx<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">let</span> <span class="token keyword">mut</span> ruka <span class="token operator">=</span> main_ctx<span class="token punctuation">.</span>world<span class="token punctuation">.</span><span class="token function">get_resource_mut</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">RukaInput</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            ruka<span class="token punctuation">.</span><span class="token function">update_finger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">await</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,da,Dn,ma,kp=`<code class="language-rust"><span class="token comment">// asyncs.rs is practically identical to </span>
<span class="token comment">// https://github.com/EkardNT/bevy-tokio-tasks/blob/master/src/lib.rs</span></code>`,fa,Rn,ha,rp=`<code class="language-rust"><span class="token comment">// particles.rs</span>

<span class="token comment">// This module has the graphical stuff</span>
<span class="token comment">// (Currently just the bevy_hanabi portal example)</span>

<span class="token keyword">use</span> <span class="token namespace">bevy<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">app<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">App</span><span class="token punctuation">,</span> <span class="token class-name">Plugin</span><span class="token punctuation">,</span> <span class="token class-name">Startup</span><span class="token punctuation">,</span> <span class="token class-name">Update</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token namespace">asset<span class="token punctuation">::</span></span><span class="token class-name">Assets</span><span class="token punctuation">,</span> <span class="token namespace">core<span class="token punctuation">::</span></span><span class="token class-name">Name</span><span class="token punctuation">,</span> <span class="token namespace">core_pipeline<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">bloom<span class="token punctuation">::</span></span><span class="token class-name">BloomSettings</span><span class="token punctuation">,</span> <span class="token namespace">core_3d<span class="token punctuation">::</span></span><span class="token class-name">Camera3dBundle</span><span class="token punctuation">,</span> <span class="token namespace">tonemapping<span class="token punctuation">::</span></span><span class="token class-name">Tonemapping</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token namespace">ecs<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">query<span class="token punctuation">::</span></span><span class="token class-name">With</span><span class="token punctuation">,</span> <span class="token namespace">system<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Commands</span><span class="token punctuation">,</span> <span class="token class-name">Query</span><span class="token punctuation">,</span> <span class="token class-name">Res</span><span class="token punctuation">,</span> <span class="token class-name">ResMut</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token namespace">gizmos<span class="token punctuation">::</span>gizmos<span class="token punctuation">::</span></span><span class="token class-name">Gizmos</span><span class="token punctuation">,</span> <span class="token namespace">math<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Vec2</span><span class="token punctuation">,</span> <span class="token class-name">Vec3</span><span class="token punctuation">,</span> <span class="token class-name">Vec4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token namespace">prelude<span class="token punctuation">::</span></span>default<span class="token punctuation">,</span> <span class="token namespace">render<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">camera<span class="token punctuation">::</span></span><span class="token class-name">Camera</span><span class="token punctuation">,</span> <span class="token namespace">color<span class="token punctuation">::</span></span><span class="token class-name">Color</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token namespace">transform<span class="token punctuation">::</span>components<span class="token punctuation">::</span></span><span class="token class-name">Transform</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">bevy_hanabi<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">Attribute</span><span class="token punctuation">,</span> <span class="token class-name">ColorOverLifetimeModifier</span><span class="token punctuation">,</span> <span class="token class-name">EffectAsset</span><span class="token punctuation">,</span> <span class="token class-name">ExprWriter</span><span class="token punctuation">,</span> <span class="token class-name">Gradient</span><span class="token punctuation">,</span> <span class="token class-name">HanabiPlugin</span><span class="token punctuation">,</span> <span class="token class-name">LinearDragModifier</span><span class="token punctuation">,</span> <span class="token class-name">OrientMode</span><span class="token punctuation">,</span> <span class="token class-name">OrientModifier</span><span class="token punctuation">,</span> <span class="token class-name">ParticleEffect</span><span class="token punctuation">,</span> <span class="token class-name">ParticleEffectBundle</span><span class="token punctuation">,</span> <span class="token class-name">SetAttributeModifier</span><span class="token punctuation">,</span> <span class="token class-name">SetPositionCircleModifier</span><span class="token punctuation">,</span> <span class="token class-name">ShapeDimension</span><span class="token punctuation">,</span> <span class="token class-name">SizeOverLifetimeModifier</span><span class="token punctuation">,</span> <span class="token class-name">Spawner</span><span class="token punctuation">,</span> <span class="token class-name">TangentAccelModifier</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token class-name">RukaInput</span><span class="token punctuation">;</span>


<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ParticlePlugin</span><span class="token punctuation">;</span>

<span class="token keyword">impl</span> <span class="token class-name">Plugin</span> <span class="token keyword">for</span> <span class="token class-name">ParticlePlugin</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">fn</span> <span class="token function-definition function">build</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> app<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">App</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        app
            <span class="token punctuation">.</span><span class="token function">add_plugins</span><span class="token punctuation">(</span><span class="token class-name">HanabiPlugin</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">add_systems</span><span class="token punctuation">(</span><span class="token class-name">Startup</span><span class="token punctuation">,</span> setup<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">add_systems</span><span class="token punctuation">(</span><span class="token class-name">Update</span><span class="token punctuation">,</span> update_fx<span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">update_fx</span><span class="token punctuation">(</span>
    <span class="token keyword">mut</span> fx<span class="token punctuation">:</span> <span class="token class-name">ResMut</span><span class="token operator">&lt;</span><span class="token class-name">Assets</span><span class="token operator">&lt;</span><span class="token class-name">EffectAsset</span><span class="token operator">>></span><span class="token punctuation">,</span>
    <span class="token keyword">mut</span> fxe<span class="token punctuation">:</span> <span class="token class-name">Query</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Transform</span><span class="token punctuation">,</span> <span class="token class-name">With</span><span class="token operator">&lt;</span><span class="token class-name">ParticleEffect</span><span class="token operator">>></span><span class="token punctuation">,</span>
    ruka<span class="token punctuation">:</span> <span class="token class-name">Res</span><span class="token operator">&lt;</span><span class="token class-name">RukaInput</span><span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token keyword">mut</span> gizmos<span class="token punctuation">:</span> <span class="token class-name">Gizmos</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>ruka<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">let</span> new <span class="token operator">=</span> ruka<span class="token punctuation">.</span><span class="token function">get_fingers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10.0</span><span class="token punctuation">;</span>

    gizmos<span class="token punctuation">.</span><span class="token function">circle_2d</span><span class="token punctuation">(</span><span class="token class-name">Vec2</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> new<span class="token punctuation">,</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token constant">RED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">segments</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> fct <span class="token keyword">in</span> fx<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> ting <span class="token operator">=</span> fct<span class="token number">.1</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token keyword">for</span> <span class="token keyword">mut</span> f <span class="token keyword">in</span> fxe<span class="token punctuation">.</span><span class="token function">iter_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Trying to update resource with new value &#123;&#125;"</span><span class="token punctuation">,</span> new<span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span>translation <span class="token operator">=</span> <span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>new<span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">setup</span><span class="token punctuation">(</span><span class="token keyword">mut</span> commands<span class="token punctuation">:</span> <span class="token class-name">Commands</span><span class="token punctuation">,</span> <span class="token keyword">mut</span> effects<span class="token punctuation">:</span> <span class="token class-name">ResMut</span><span class="token operator">&lt;</span><span class="token class-name">Assets</span><span class="token operator">&lt;</span><span class="token class-name">EffectAsset</span><span class="token operator">>></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    commands<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>
        <span class="token class-name">Camera3dBundle</span> <span class="token punctuation">&#123;</span>
            transform<span class="token punctuation">:</span> <span class="token class-name">Transform</span><span class="token punctuation">::</span><span class="token function">from_translation</span><span class="token punctuation">(</span><span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            camera<span class="token punctuation">:</span> <span class="token class-name">Camera</span> <span class="token punctuation">&#123;</span>
                hdr<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                clear_color<span class="token punctuation">:</span> <span class="token class-name">Color</span><span class="token punctuation">::</span><span class="token constant">BLACK</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">..</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            tonemapping<span class="token punctuation">:</span> <span class="token class-name">Tonemapping</span><span class="token punctuation">::</span><span class="token class-name">None</span><span class="token punctuation">,</span>
            <span class="token punctuation">..</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">BloomSettings</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> color_gradient1 <span class="token operator">=</span> <span class="token class-name">Gradient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    color_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token class-name">Vec4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    color_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token class-name">Vec4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    color_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token class-name">Vec4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    color_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token class-name">Vec4</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> size_gradient1 <span class="token operator">=</span> <span class="token class-name">Gradient</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token class-name">Vec2</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    size_gradient1<span class="token punctuation">.</span><span class="token function">add_key</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token class-name">Vec2</span><span class="token punctuation">::</span><span class="token function">splat</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> writer <span class="token operator">=</span> <span class="token class-name">ExprWriter</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> init_pos <span class="token operator">=</span> <span class="token class-name">SetPositionCircleModifier</span> <span class="token punctuation">&#123;</span>
        center<span class="token punctuation">:</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        axis<span class="token punctuation">:</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token class-name">Z</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        radius<span class="token punctuation">:</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        dimension<span class="token punctuation">:</span> <span class="token class-name">ShapeDimension</span><span class="token punctuation">::</span><span class="token class-name">Surface</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> age <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> init_age <span class="token operator">=</span> <span class="token class-name">SetAttributeModifier</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Attribute</span><span class="token punctuation">::</span><span class="token constant">AGE</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Give a bit of variation by randomizing the lifetime per particle</span>
    <span class="token keyword">let</span> lifetime <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">0.6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uniform</span><span class="token punctuation">(</span>writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">1.3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> init_lifetime <span class="token operator">=</span> <span class="token class-name">SetAttributeModifier</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Attribute</span><span class="token punctuation">::</span><span class="token constant">LIFETIME</span><span class="token punctuation">,</span> lifetime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Add drag to make particles slow down a bit after the initial acceleration</span>
    <span class="token keyword">let</span> drag <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">lit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> update_drag <span class="token operator">=</span> <span class="token class-name">LinearDragModifier</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>drag<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> module <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> tangent_accel <span class="token operator">=</span> <span class="token class-name">TangentAccelModifier</span><span class="token punctuation">::</span><span class="token function">constant</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> module<span class="token punctuation">,</span> <span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token constant">ZERO</span><span class="token punctuation">,</span> <span class="token class-name">Vec3</span><span class="token punctuation">::</span><span class="token class-name">Z</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> effect1 <span class="token operator">=</span> effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
        <span class="token class-name">EffectAsset</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">16384</span><span class="token punctuation">,</span> <span class="token class-name">Spawner</span><span class="token punctuation">::</span><span class="token function">rate</span><span class="token punctuation">(</span><span class="token number">5000.0</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> module<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">with_name</span><span class="token punctuation">(</span><span class="token string">"portal"</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>init_pos<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>init_age<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>init_lifetime<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>update_drag<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>tangent_accel<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">ColorOverLifetimeModifier</span> <span class="token punctuation">&#123;</span>
                gradient<span class="token punctuation">:</span> color_gradient1<span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">SizeOverLifetimeModifier</span> <span class="token punctuation">&#123;</span>
                gradient<span class="token punctuation">:</span> size_gradient1<span class="token punctuation">,</span>
                screen_space_size<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">OrientModifier</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">OrientMode</span><span class="token punctuation">::</span><span class="token class-name">AlongVelocity</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    commands<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token punctuation">(</span>
        <span class="token class-name">Name</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token string">"portal"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token class-name">ParticleEffectBundle</span> <span class="token punctuation">&#123;</span>
            effect<span class="token punctuation">:</span> <span class="token class-name">ParticleEffect</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>effect1<span class="token punctuation">)</span><span class="token punctuation">,</span>
            transform<span class="token punctuation">:</span> <span class="token class-name">Transform</span><span class="token punctuation">::</span><span class="token constant">IDENTITY</span><span class="token punctuation">,</span>
            <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,wa,On,qt="ESP32 Rust",ya,Wn,Xt="This was the ultimately unused Rust code for the ESP32. Reading the analog pin proved to be too difficult, but digital pins worked fine and the code does manage to send some data when the chip gets connected. I left this here for the sake of completeness, in case someone wants to take a look and maybe learn from these mistakes.",ba,Fn,ga,dp=`<code class="language-rust"><span class="token comment">// main.rs</span>

<span class="token comment">// Not final doesn't read the analog inputs properly yet</span>
<span class="token comment">// read_oneshot() doesn't work</span>

<span class="token attribute attr-name">#![no_std]</span>
<span class="token attribute attr-name">#![no_main]</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">utils</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">utils<span class="token punctuation">::</span></span>hal<span class="token punctuation">;</span>

<span class="token keyword">mod</span> <span class="token module-declaration namespace">hand</span><span class="token punctuation">;</span>
<span class="token keyword">mod</span> <span class="token module-declaration namespace">mux</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token namespace">bleps<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>
    <span class="token namespace">ad_structure<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>
        create_advertising_data<span class="token punctuation">,</span> <span class="token class-name">AdStructure</span><span class="token punctuation">,</span> <span class="token constant">BR_EDR_NOT_SUPPORTED</span><span class="token punctuation">,</span> <span class="token constant">LE_GENERAL_DISCOVERABLE</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token namespace">attribute_server<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">AttributeServer</span><span class="token punctuation">,</span> <span class="token class-name">NotificationData</span><span class="token punctuation">,</span> <span class="token class-name">WorkResult</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    gatt<span class="token punctuation">,</span> <span class="token class-name">Ble</span><span class="token punctuation">,</span> <span class="token class-name">HciConnector</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> esp_backtrace <span class="token keyword">as</span> _<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">esp_println<span class="token punctuation">::</span></span>println<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">esp_wifi<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token namespace">ble<span class="token punctuation">::</span>controller<span class="token punctuation">::</span></span><span class="token class-name">BleConnector</span><span class="token punctuation">,</span> initialize<span class="token punctuation">,</span> <span class="token class-name">EspWifiInitFor</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">hal<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span>
    <span class="token namespace">analog<span class="token punctuation">::</span>adc<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">AdcConfig</span><span class="token punctuation">,</span> <span class="token class-name">Attenuation</span><span class="token punctuation">,</span> <span class="token constant">ADC</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token namespace">clock<span class="token punctuation">::</span></span><span class="token class-name">ClockControl</span><span class="token punctuation">,</span>
    <span class="token namespace">delay<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token keyword">self</span><span class="token punctuation">,</span> <span class="token class-name">Delay</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token namespace">gpio<span class="token punctuation">::</span></span><span class="token constant">IO</span><span class="token punctuation">,</span>
    <span class="token namespace">peripherals<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">,</span>
    <span class="token namespace">prelude<span class="token punctuation">::</span></span><span class="token operator">*</span><span class="token punctuation">,</span>
    <span class="token namespace">rng<span class="token punctuation">::</span></span><span class="token class-name">Rng</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token keyword">crate</span><span class="token punctuation">::</span><span class="token punctuation">&#123;</span><span class="token namespace">hand<span class="token punctuation">::</span></span><span class="token class-name">Fingers</span><span class="token punctuation">,</span> <span class="token namespace">mux<span class="token punctuation">::</span></span>pin_set_mux_selector<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[entry]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-></span> <span class="token operator">!</span> <span class="token punctuation">&#123;</span>
    <span class="token attribute attr-name">#[cfg(feature = <span class="token string">"log"</span>)]</span>
    <span class="token namespace">esp_println<span class="token punctuation">::</span>logger<span class="token punctuation">::</span></span><span class="token function">init_logger</span><span class="token punctuation">(</span><span class="token namespace">log<span class="token punctuation">::</span></span><span class="token class-name">LevelFilter</span><span class="token punctuation">::</span><span class="token class-name">Info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> peripherals <span class="token operator">=</span> <span class="token class-name">Peripherals</span><span class="token punctuation">::</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> system <span class="token operator">=</span> peripherals<span class="token punctuation">.</span><span class="token constant">SYSTEM</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> clocks <span class="token operator">=</span> <span class="token class-name">ClockControl</span><span class="token punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>system<span class="token punctuation">.</span>clock_control<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token class-name">Delay</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>clocks<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">"xtensa"</span>)]</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token namespace">hal<span class="token punctuation">::</span>timer<span class="token punctuation">::</span></span><span class="token class-name">TimerGroup</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>peripherals<span class="token punctuation">.</span><span class="token constant">TIMG1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>clocks<span class="token punctuation">,</span> <span class="token class-name">None</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timer0<span class="token punctuation">;</span>
    <span class="token attribute attr-name">#[cfg(target_arch = <span class="token string">"riscv32"</span>)]</span>
    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token namespace">hal<span class="token punctuation">::</span>systimer<span class="token punctuation">::</span></span><span class="token class-name">SystemTimer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>peripherals<span class="token punctuation">.</span><span class="token constant">SYSTIMER</span><span class="token punctuation">)</span><span class="token punctuation">.</span>alarm0<span class="token punctuation">;</span>
    <span class="token keyword">let</span> init <span class="token operator">=</span> <span class="token function">initialize</span><span class="token punctuation">(</span>
        <span class="token class-name">EspWifiInitFor</span><span class="token punctuation">::</span><span class="token class-name">Ble</span><span class="token punctuation">,</span>
        timer<span class="token punctuation">,</span>
        <span class="token class-name">Rng</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>peripherals<span class="token punctuation">.</span><span class="token constant">RNG</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        system<span class="token punctuation">.</span>radio_clock_control<span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>clocks<span class="token punctuation">,</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> io <span class="token operator">=</span> <span class="token constant">IO</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>peripherals<span class="token punctuation">.</span><span class="token constant">GPIO</span><span class="token punctuation">,</span> peripherals<span class="token punctuation">.</span><span class="token constant">IO_MUX</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> selector <span class="token operator">=</span> <span class="token namespace">mux<span class="token punctuation">::</span></span><span class="token class-name">Selector</span> <span class="token punctuation">&#123;</span>
        s2<span class="token punctuation">:</span> io<span class="token punctuation">.</span>pins<span class="token punctuation">.</span>gpio2<span class="token punctuation">.</span><span class="token function">into_push_pull_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        s1<span class="token punctuation">:</span> io<span class="token punctuation">.</span>pins<span class="token punctuation">.</span>gpio3<span class="token punctuation">.</span><span class="token function">into_push_pull_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        s0<span class="token punctuation">:</span> io<span class="token punctuation">.</span>pins<span class="token punctuation">.</span>gpio4<span class="token punctuation">.</span><span class="token function">into_push_pull_output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> btn <span class="token operator">=</span> io<span class="token punctuation">.</span>pins<span class="token punctuation">.</span>gpio8<span class="token punctuation">.</span><span class="token function">into_pull_up_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> debounce_cnt <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> bluetooth <span class="token operator">=</span> peripherals<span class="token punctuation">.</span><span class="token constant">BT</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> apin <span class="token operator">=</span> io<span class="token punctuation">.</span>pins<span class="token punctuation">.</span>gpio5<span class="token punctuation">.</span><span class="token function">into_analog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> adc_conf <span class="token operator">=</span> <span class="token class-name">AdcConfig</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> adc_pin <span class="token operator">=</span> adc_conf<span class="token punctuation">.</span><span class="token function">enable_pin</span><span class="token punctuation">(</span>apin<span class="token punctuation">,</span> <span class="token class-name">Attenuation</span><span class="token punctuation">::</span><span class="token class-name">Attenuation11dB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> adc1 <span class="token operator">=</span> <span class="token constant">ADC</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token constant">ADC1</span><span class="token operator">></span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>peripherals<span class="token punctuation">.</span><span class="token constant">ADC1</span><span class="token punctuation">,</span> adc_conf<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">pin_set_mux_selector</span><span class="token punctuation">(</span><span class="token class-name">Fingers</span><span class="token punctuation">::</span><span class="token class-name">Thumb</span><span class="token punctuation">.</span><span class="token function">to_pin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> val<span class="token punctuation">:</span> <span class="token keyword">u16</span> <span class="token operator">=</span> <span class="token namespace">nb<span class="token punctuation">::</span></span><span class="token macro property">block!</span><span class="token punctuation">(</span>adc1<span class="token punctuation">.</span><span class="token function">read_oneshot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> adc_pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Value read: &#123;:?&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> connector <span class="token operator">=</span> <span class="token class-name">BleConnector</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>init<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> bluetooth<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> hci <span class="token operator">=</span> <span class="token class-name">HciConnector</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>connector<span class="token punctuation">,</span> <span class="token namespace">esp_wifi<span class="token punctuation">::</span></span>current_millis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> ble <span class="token operator">=</span> <span class="token class-name">Ble</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hci<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> ble<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> ble<span class="token punctuation">.</span><span class="token function">cmd_set_le_advertising_parameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span>
            <span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span>
            ble<span class="token punctuation">.</span><span class="token function">cmd_set_le_advertising_data</span><span class="token punctuation">(</span>
                <span class="token function">create_advertising_data</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>
                    <span class="token class-name">AdStructure</span><span class="token punctuation">::</span><span class="token class-name">Flags</span><span class="token punctuation">(</span><span class="token constant">LE_GENERAL_DISCOVERABLE</span> <span class="token operator">|</span> <span class="token constant">BR_EDR_NOT_SUPPORTED</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">AdStructure</span><span class="token punctuation">::</span><span class="token class-name">ServiceUuids16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">Uuid</span><span class="token punctuation">::</span><span class="token class-name">Uuid16</span><span class="token punctuation">(</span><span class="token number">0x1809</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">AdStructure</span><span class="token punctuation">::</span><span class="token class-name">CompleteLocalName</span><span class="token punctuation">(</span><span class="token namespace">utils<span class="token punctuation">::</span></span><span class="token constant">SOC_NAME</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">]</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> ble<span class="token punctuation">.</span><span class="token function">cmd_set_le_advertise_enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"started advertising"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> rbtn <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> btn<span class="token punctuation">.</span><span class="token function">is_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">222_u8</span><span class="token punctuation">.</span><span class="token function">to_le_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token number">111_u8</span><span class="token punctuation">.</span><span class="token function">to_le_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>val<span class="token punctuation">.</span><span class="token function">to_le_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token number">2</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> rf <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">b"Hello Bare-Metal BLE"</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token number">17</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> wf <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"RECEIVED: &#123;&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> wf2 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"RECEIVED: &#123;&#125; &#123;:?&#125;"</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> rf3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            data<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">copy_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token string">b"Hola!"</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token number">5</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> wf3 <span class="token operator">=</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>offset<span class="token punctuation">:</span> <span class="token keyword">usize</span><span class="token punctuation">,</span> data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">&#123;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"RECEIVED: Offset &#123;&#125;, data &#123;:?&#125;"</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token comment">// let mut rval = |offset: usize, data: &amp;mut [u8]| &#123;</span>
        <span class="token comment">//     let val = nb::block!(adc1.read_oneshot(&amp;mut adc_pin)).unwrap();</span>
        <span class="token comment">//     data[..2].copy_from_slice(&amp;val.to_le_bytes());</span>
        <span class="token comment">//     2</span>
        <span class="token comment">// &#125;;</span>

        <span class="token macro property">gatt!</span><span class="token punctuation">(</span><span class="token punctuation">[</span>service <span class="token punctuation">&#123;</span>
            uuid<span class="token punctuation">:</span> <span class="token string">"937312e0-2354-11eb-9f10-fbc30a62cf38"</span><span class="token punctuation">,</span>
            characteristics<span class="token punctuation">:</span> <span class="token punctuation">[</span>
                <span class="token comment">// characteristic &#123;</span>
                <span class="token comment">//     uuid: "937312e0-2354-11eb-9f10-fbc30a62cf38",</span>
                <span class="token comment">//     read: rval,</span>
                <span class="token comment">// &#125;,</span>
                characteristic <span class="token punctuation">&#123;</span>
                    uuid<span class="token punctuation">:</span> <span class="token string">"937312e0-2354-11eb-9f10-fbc30a62cf38"</span><span class="token punctuation">,</span>
                    read<span class="token punctuation">:</span> rbtn<span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                characteristic <span class="token punctuation">&#123;</span>
                    uuid<span class="token punctuation">:</span> <span class="token string">"937312e0-2354-11eb-9f10-fbc30a62cf38"</span><span class="token punctuation">,</span>
                    read<span class="token punctuation">:</span> rf<span class="token punctuation">,</span>
                    write<span class="token punctuation">:</span> wf<span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                characteristic <span class="token punctuation">&#123;</span>
                    uuid<span class="token punctuation">:</span> <span class="token string">"957312e0-2354-11eb-9f10-fbc30a62cf38"</span><span class="token punctuation">,</span>
                    write<span class="token punctuation">:</span> wf2<span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                characteristic <span class="token punctuation">&#123;</span>
                    name<span class="token punctuation">:</span> <span class="token string">"my_characteristic"</span><span class="token punctuation">,</span>
                    uuid<span class="token punctuation">:</span> <span class="token string">"987312e0-2354-11eb-9f10-fbc30a62cf38"</span><span class="token punctuation">,</span>
                    notify<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
                    read<span class="token punctuation">:</span> rf3<span class="token punctuation">,</span>
                    write<span class="token punctuation">:</span> wf3<span class="token punctuation">,</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">let</span> <span class="token keyword">mut</span> rng <span class="token operator">=</span> <span class="token namespace">bleps<span class="token punctuation">::</span>no_rng<span class="token punctuation">::</span></span><span class="token class-name">NoRng</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> <span class="token keyword">mut</span> srv <span class="token operator">=</span> <span class="token class-name">AttributeServer</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> ble<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> gatt_attributes<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> rng<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">loop</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> <span class="token keyword">mut</span> notification <span class="token operator">=</span> <span class="token class-name">None</span><span class="token punctuation">;</span>

            <span class="token macro property">println!</span><span class="token punctuation">(</span>
                <span class="token string">"Selector set to &#123;&#125;, &#123;&#125;, &#123;&#125;, should be high, low, low"</span><span class="token punctuation">,</span>
                selector<span class="token punctuation">.</span>s2<span class="token punctuation">.</span><span class="token function">is_set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                selector<span class="token punctuation">.</span>s1<span class="token punctuation">.</span><span class="token function">is_set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                selector<span class="token punctuation">.</span>s0<span class="token punctuation">.</span><span class="token function">is_set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">let</span> val <span class="token operator">=</span> <span class="token namespace">nb<span class="token punctuation">::</span></span><span class="token macro property">block!</span><span class="token punctuation">(</span>adc1<span class="token punctuation">.</span><span class="token function">read_oneshot</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> adc_pin<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Value read: &#123;:?&#125;"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
            delay<span class="token punctuation">.</span><span class="token function">delay_millis</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">match</span> srv<span class="token punctuation">.</span><span class="token function">do_work_with_notification</span><span class="token punctuation">(</span>notification<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Ok</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">WorkResult</span><span class="token punctuation">::</span><span class="token class-name">GotDisconnected</span> <span class="token operator">=</span> res <span class="token punctuation">&#123;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token class-name">Err</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"&#123;:?&#125;"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code>`,_a,Un,va,mp=`<code class="language-rust"><span class="token comment">// hand.rs</span>

<span class="token comment">// Abstraction that connects fingers to specific pins on the multiplexer. </span>
<span class="token comment">// Useful in case the pins change in future iterations or when </span>
<span class="token comment">// switching to the other hand. </span></code>`,xa,Gn,Ca,fp=`<code class="language-rust"><span class="token comment">// mux.rs</span>

<span class="token comment">// Code that handles the multiplexer </span>

<span class="token keyword">use</span> <span class="token namespace">esp_hal<span class="token punctuation">::</span>gpio<span class="token punctuation">::</span></span><span class="token punctuation">&#123;</span><span class="token class-name">GpioPin</span><span class="token punctuation">,</span> <span class="token class-name">Output</span><span class="token punctuation">,</span> <span class="token class-name">PushPull</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token attribute attr-name">#[derive(Debug)]</span>
<span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">MuxPins</span> <span class="token punctuation">&#123;</span>
    <span class="token constant">A0</span><span class="token punctuation">,</span>
    <span class="token constant">A1</span><span class="token punctuation">,</span>
    <span class="token constant">A2</span><span class="token punctuation">,</span>
    <span class="token constant">A3</span><span class="token punctuation">,</span>
    <span class="token constant">A4</span><span class="token punctuation">,</span>
    <span class="token constant">A5</span><span class="token punctuation">,</span>
    <span class="token constant">A6</span><span class="token punctuation">,</span>
    <span class="token constant">A7</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// Struct for the selector pins, mostly just to pass</span>
<span class="token comment">/// them in more easily as a single argument to pin_set_mux_selector</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Selector</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">pub</span> s2<span class="token punctuation">:</span> <span class="token class-name">GpioPin</span><span class="token operator">&lt;</span><span class="token class-name">Output</span><span class="token operator">&lt;</span><span class="token class-name">PushPull</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> s1<span class="token punctuation">:</span> <span class="token class-name">GpioPin</span><span class="token operator">&lt;</span><span class="token class-name">Output</span><span class="token operator">&lt;</span><span class="token class-name">PushPull</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> s0<span class="token punctuation">:</span> <span class="token class-name">GpioPin</span><span class="token operator">&lt;</span><span class="token class-name">Output</span><span class="token operator">&lt;</span><span class="token class-name">PushPull</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">></span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/// Set the selector pins correctly based on the desired mux pin</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">pin_set_mux_selector</span><span class="token punctuation">(</span>pin<span class="token punctuation">:</span> <span class="token class-name">MuxPins</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">Selector</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> <span class="token class-name">Selector</span> <span class="token punctuation">&#123;</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> s0<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> s1<span class="token punctuation">,</span> <span class="token keyword">ref</span> <span class="token keyword">mut</span> s2 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> s<span class="token punctuation">;</span>
    
    <span class="token keyword">match</span> pin <span class="token punctuation">&#123;</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A0</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A1</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A2</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A3</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A4</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A5</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A6</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_low</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token class-name">MuxPins</span><span class="token punctuation">::</span><span class="token constant">A7</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
            s2<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s1<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            s0<span class="token punctuation">.</span><span class="token function">set_high</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`;return{c(){g=p("h3"),g.textContent=Ia,Vn=o(),_=p("ul"),_.innerHTML=Ta,Nn=o(),v=p("h1"),v.textContent=Pa,zn=o(),x=p("pre"),jn=new w(!1),qn=o(),C=p("h1"),C.textContent=Sa,Xn=o(),E=p("p"),E.textContent=Aa,Yn=o(),I=p("h1"),I.textContent=La,Zn=o(),T=p("p"),T.innerHTML=Ma,Jn=o(),P=p("p"),P.innerHTML=Ba,Qn=o(),S=p("p"),S.innerHTML=Ha,Kn=o(),A=p("p"),A.innerHTML=Da,$n=o(),L=p("p"),L.textContent=Ra,ns=o(),M=p("p"),M.innerHTML=Oa,ss=o(),B=p("p"),B.innerHTML=Wa,as=o(),H=p("h1"),H.textContent=Fa,ts=o(),D=p("p"),D.textContent=Ua,ps=o(),R=p("h2"),R.textContent=Ga,es=o(),O=p("p"),O.textContent=Va,os=o(),W=p("p"),W.textContent=Na,cs=o(),F=p("img"),us=o(),U=p("p"),U.textContent=ja,ls=o(),G=p("pre"),is=new w(!1),ks=o(),V=p("p"),V.textContent=qa,rs=o(),N=p("p"),N.textContent=Xa,ds=o(),z=p("h2"),z.textContent=Ya,ms=o(),j=p("p"),j.innerHTML=Za,fs=o(),q=p("img"),hs=o(),X=p("p"),X.textContent=Qa,ws=o(),Y=p("p"),Y.innerHTML=Ka,ys=o(),Z=p("img"),bs=o(),J=p("p"),J.innerHTML=nt,gs=o(),Q=p("p"),Q.innerHTML=st,_s=o(),K=p("p"),K.textContent=at,vs=o(),$=p("p"),$.innerHTML=tt,xs=o(),nn=p("p"),nn.innerHTML=pt,Cs=o(),sn=p("p"),sn.textContent=et,Es=o(),an=p("p"),an.textContent=ot,Is=o(),tn=p("img"),Ts=o(),k=p("video"),k.innerHTML=ut,Ps=o(),r=p("video"),r.innerHTML=it,Ss=o(),pn=p("p"),pn.textContent=rt,As=o(),en=p("p"),en.textContent=dt,Ls=o(),on=p("h2"),on.textContent=mt,Ms=o(),cn=p("p"),cn.textContent=ft,Bs=o(),un=p("p"),un.textContent=ht,Hs=o(),ln=p("p"),ln.textContent=wt,Ds=o(),kn=p("p"),kn.innerHTML=yt,Rs=o(),d=p("video"),d.innerHTML=bt,Os=o(),rn=p("p"),rn.textContent=_t,Ws=o(),dn=p("img"),Fs=o(),mn=p("p"),mn.textContent=xt,Us=o(),fn=p("p"),fn.innerHTML=Ct,Gs=o(),hn=p("p"),hn.textContent=Et,Vs=o(),m=p("video"),m.innerHTML=It,Ns=o(),wn=p("p"),wn.textContent=Pt,zs=o(),yn=p("p"),yn.textContent=St,js=o(),bn=p("p"),bn.innerHTML=At,qs=o(),gn=p("p"),gn.textContent=Lt,Xs=o(),f=p("video"),f.innerHTML=Mt,Ys=o(),_n=p("h1"),_n.textContent=Ht,Zs=o(),vn=p("p"),vn.textContent=Dt,Js=o(),xn=p("h2"),xn.textContent=Rt,Qs=o(),Cn=p("p"),Cn.textContent=Ot,Ks=o(),En=p("p"),En.textContent=Wt,$s=o(),In=p("pre"),na=new w(!1),sa=o(),Tn=p("pre"),aa=new w(!1),ta=o(),Pn=p("pre"),pa=new w(!1),ea=o(),Sn=p("h2"),Sn.textContent=Ft,oa=o(),An=p("p"),An.textContent=Ut,ca=o(),Ln=p("img"),ua=o(),h=p("video"),h.innerHTML=Vt,la=o(),Mn=p("p"),Mn.textContent=zt,ia=o(),Bn=p("p"),Bn.innerHTML=jt,ka=o(),Hn=p("pre"),ra=new w(!1),da=o(),Dn=p("pre"),ma=new w(!1),fa=o(),Rn=p("pre"),ha=new w(!1),wa=o(),On=p("h2"),On.textContent=qt,ya=o(),Wn=p("p"),Wn.textContent=Xt,ba=o(),Fn=p("pre"),ga=new w(!1),_a=o(),Un=p("pre"),va=new w(!1),xa=o(),Gn=p("pre"),Ca=new w(!1),this.h()},l(n){g=e(n,"H3",{"data-svelte-h":!0}),u(g)!=="svelte-sbwzft"&&(g.textContent=Ia),Vn=c(n),_=e(n,"UL",{"data-svelte-h":!0}),u(_)!=="svelte-1htdqme"&&(_.innerHTML=Ta),Nn=c(n),v=e(n,"H1",{"data-svelte-h":!0}),u(v)!=="svelte-g9rspt"&&(v.textContent=Pa),zn=c(n),x=e(n,"PRE",{class:!0});var a=y(x);jn=b(a,!1),a.forEach(s),qn=c(n),C=e(n,"H1",{"data-svelte-h":!0}),u(C)!=="svelte-kxioer"&&(C.textContent=Sa),Xn=c(n),E=e(n,"P",{"data-svelte-h":!0}),u(E)!=="svelte-i7hnr2"&&(E.textContent=Aa),Yn=c(n),I=e(n,"H1",{"data-svelte-h":!0}),u(I)!=="svelte-z7urna"&&(I.textContent=La),Zn=c(n),T=e(n,"P",{"data-svelte-h":!0}),u(T)!=="svelte-1vuoxka"&&(T.innerHTML=Ma),Jn=c(n),P=e(n,"P",{"data-svelte-h":!0}),u(P)!=="svelte-lv9v89"&&(P.innerHTML=Ba),Qn=c(n),S=e(n,"P",{"data-svelte-h":!0}),u(S)!=="svelte-ftk1zm"&&(S.innerHTML=Ha),Kn=c(n),A=e(n,"P",{"data-svelte-h":!0}),u(A)!=="svelte-mtmm8d"&&(A.innerHTML=Da),$n=c(n),L=e(n,"P",{"data-svelte-h":!0}),u(L)!=="svelte-cyysea"&&(L.textContent=Ra),ns=c(n),M=e(n,"P",{"data-svelte-h":!0}),u(M)!=="svelte-ge8jc"&&(M.innerHTML=Oa),ss=c(n),B=e(n,"P",{"data-svelte-h":!0}),u(B)!=="svelte-wwxbvg"&&(B.innerHTML=Wa),as=c(n),H=e(n,"H1",{"data-svelte-h":!0}),u(H)!=="svelte-18meajt"&&(H.textContent=Fa),ts=c(n),D=e(n,"P",{"data-svelte-h":!0}),u(D)!=="svelte-bwhlq2"&&(D.textContent=Ua),ps=c(n),R=e(n,"H2",{"data-svelte-h":!0}),u(R)!=="svelte-1s4d19d"&&(R.textContent=Ga),es=c(n),O=e(n,"P",{"data-svelte-h":!0}),u(O)!=="svelte-1d72qdo"&&(O.textContent=Va),os=c(n),W=e(n,"P",{"data-svelte-h":!0}),u(W)!=="svelte-hn33mf"&&(W.textContent=Na),cs=c(n),F=e(n,"IMG",{src:!0,alt:!0}),us=c(n),U=e(n,"P",{"data-svelte-h":!0}),u(U)!=="svelte-be1lxd"&&(U.textContent=ja),ls=c(n),G=e(n,"PRE",{class:!0});var Yt=y(G);is=b(Yt,!1),Yt.forEach(s),ks=c(n),V=e(n,"P",{"data-svelte-h":!0}),u(V)!=="svelte-1iqn70s"&&(V.textContent=qa),rs=c(n),N=e(n,"P",{"data-svelte-h":!0}),u(N)!=="svelte-18ky0p3"&&(N.textContent=Xa),ds=c(n),z=e(n,"H2",{"data-svelte-h":!0}),u(z)!=="svelte-83alt0"&&(z.textContent=Ya),ms=c(n),j=e(n,"P",{"data-svelte-h":!0}),u(j)!=="svelte-4eifmj"&&(j.innerHTML=Za),fs=c(n),q=e(n,"IMG",{src:!0,alt:!0}),hs=c(n),X=e(n,"P",{"data-svelte-h":!0}),u(X)!=="svelte-qkjezy"&&(X.textContent=Qa),ws=c(n),Y=e(n,"P",{"data-svelte-h":!0}),u(Y)!=="svelte-pu8eem"&&(Y.innerHTML=Ka),ys=c(n),Z=e(n,"IMG",{src:!0,alt:!0}),bs=c(n),J=e(n,"P",{"data-svelte-h":!0}),u(J)!=="svelte-1st0tvc"&&(J.innerHTML=nt),gs=c(n),Q=e(n,"P",{"data-svelte-h":!0}),u(Q)!=="svelte-ear7ud"&&(Q.innerHTML=st),_s=c(n),K=e(n,"P",{"data-svelte-h":!0}),u(K)!=="svelte-v7gjjf"&&(K.textContent=at),vs=c(n),$=e(n,"P",{"data-svelte-h":!0}),u($)!=="svelte-tdqmkb"&&($.innerHTML=tt),xs=c(n),nn=e(n,"P",{"data-svelte-h":!0}),u(nn)!=="svelte-1oswdia"&&(nn.innerHTML=pt),Cs=c(n),sn=e(n,"P",{"data-svelte-h":!0}),u(sn)!=="svelte-1vidx0w"&&(sn.textContent=et),Es=c(n),an=e(n,"P",{"data-svelte-h":!0}),u(an)!=="svelte-lbzbg2"&&(an.textContent=ot),Is=c(n),tn=e(n,"IMG",{src:!0,alt:!0}),Ts=c(n),k=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(k)!=="svelte-11d2cw1"&&(k.innerHTML=ut),Ps=c(n),r=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(r)!=="svelte-1b6j8m8"&&(r.innerHTML=it),Ss=c(n),pn=e(n,"P",{"data-svelte-h":!0}),u(pn)!=="svelte-9nms53"&&(pn.textContent=rt),As=c(n),en=e(n,"P",{"data-svelte-h":!0}),u(en)!=="svelte-126tnm5"&&(en.textContent=dt),Ls=c(n),on=e(n,"H2",{"data-svelte-h":!0}),u(on)!=="svelte-18w3ki6"&&(on.textContent=mt),Ms=c(n),cn=e(n,"P",{"data-svelte-h":!0}),u(cn)!=="svelte-zxlt5y"&&(cn.textContent=ft),Bs=c(n),un=e(n,"P",{"data-svelte-h":!0}),u(un)!=="svelte-1bn5g7x"&&(un.textContent=ht),Hs=c(n),ln=e(n,"P",{"data-svelte-h":!0}),u(ln)!=="svelte-15cxy2k"&&(ln.textContent=wt),Ds=c(n),kn=e(n,"P",{"data-svelte-h":!0}),u(kn)!=="svelte-1f30av7"&&(kn.innerHTML=yt),Rs=c(n),d=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(d)!=="svelte-1x58cn3"&&(d.innerHTML=bt),Os=c(n),rn=e(n,"P",{"data-svelte-h":!0}),u(rn)!=="svelte-lg2jnt"&&(rn.textContent=_t),Ws=c(n),dn=e(n,"IMG",{src:!0,alt:!0}),Fs=c(n),mn=e(n,"P",{"data-svelte-h":!0}),u(mn)!=="svelte-1doplce"&&(mn.textContent=xt),Us=c(n),fn=e(n,"P",{"data-svelte-h":!0}),u(fn)!=="svelte-19tadf2"&&(fn.innerHTML=Ct),Gs=c(n),hn=e(n,"P",{"data-svelte-h":!0}),u(hn)!=="svelte-1l2iz56"&&(hn.textContent=Et),Vs=c(n),m=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(m)!=="svelte-1pdusmi"&&(m.innerHTML=It),Ns=c(n),wn=e(n,"P",{"data-svelte-h":!0}),u(wn)!=="svelte-rg3fpq"&&(wn.textContent=Pt),zs=c(n),yn=e(n,"P",{"data-svelte-h":!0}),u(yn)!=="svelte-1cx6mtm"&&(yn.textContent=St),js=c(n),bn=e(n,"P",{"data-svelte-h":!0}),u(bn)!=="svelte-1wltmte"&&(bn.innerHTML=At),qs=c(n),gn=e(n,"P",{"data-svelte-h":!0}),u(gn)!=="svelte-1aqeym2"&&(gn.textContent=Lt),Xs=c(n),f=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(f)!=="svelte-1ei0mh6"&&(f.innerHTML=Mt),Ys=c(n),_n=e(n,"H1",{"data-svelte-h":!0}),u(_n)!=="svelte-1ae1dy5"&&(_n.textContent=Ht),Zs=c(n),vn=e(n,"P",{"data-svelte-h":!0}),u(vn)!=="svelte-1hl5c61"&&(vn.textContent=Dt),Js=c(n),xn=e(n,"H2",{"data-svelte-h":!0}),u(xn)!=="svelte-18w3ki6"&&(xn.textContent=Rt),Qs=c(n),Cn=e(n,"P",{"data-svelte-h":!0}),u(Cn)!=="svelte-1h5tzio"&&(Cn.textContent=Ot),Ks=c(n),En=e(n,"P",{"data-svelte-h":!0}),u(En)!=="svelte-1dkd2sm"&&(En.textContent=Wt),$s=c(n),In=e(n,"PRE",{class:!0});var Zt=y(In);na=b(Zt,!1),Zt.forEach(s),sa=c(n),Tn=e(n,"PRE",{class:!0});var Jt=y(Tn);aa=b(Jt,!1),Jt.forEach(s),ta=c(n),Pn=e(n,"PRE",{class:!0});var Qt=y(Pn);pa=b(Qt,!1),Qt.forEach(s),ea=c(n),Sn=e(n,"H2",{"data-svelte-h":!0}),u(Sn)!=="svelte-3xpkxq"&&(Sn.textContent=Ft),oa=c(n),An=e(n,"P",{"data-svelte-h":!0}),u(An)!=="svelte-1dgm0bl"&&(An.textContent=Ut),ca=c(n),Ln=e(n,"IMG",{src:!0,alt:!0}),ua=c(n),h=e(n,"VIDEO",{src:!0,"data-svelte-h":!0}),u(h)!=="svelte-1ei0mh6"&&(h.innerHTML=Vt),la=c(n),Mn=e(n,"P",{"data-svelte-h":!0}),u(Mn)!=="svelte-tk7nup"&&(Mn.textContent=zt),ia=c(n),Bn=e(n,"P",{"data-svelte-h":!0}),u(Bn)!=="svelte-9d7zny"&&(Bn.innerHTML=jt),ka=c(n),Hn=e(n,"PRE",{class:!0});var Kt=y(Hn);ra=b(Kt,!1),Kt.forEach(s),da=c(n),Dn=e(n,"PRE",{class:!0});var $t=y(Dn);ma=b($t,!1),$t.forEach(s),fa=c(n),Rn=e(n,"PRE",{class:!0});var np=y(Rn);ha=b(np,!1),np.forEach(s),wa=c(n),On=e(n,"H2",{"data-svelte-h":!0}),u(On)!=="svelte-1uwfc1f"&&(On.textContent=qt),ya=c(n),Wn=e(n,"P",{"data-svelte-h":!0}),u(Wn)!=="svelte-18l232o"&&(Wn.textContent=Xt),ba=c(n),Fn=e(n,"PRE",{class:!0});var sp=y(Fn);ga=b(sp,!1),sp.forEach(s),_a=c(n),Un=e(n,"PRE",{class:!0});var ap=y(Un);va=b(ap,!1),ap.forEach(s),xa=c(n),Gn=e(n,"PRE",{class:!0});var tp=y(Gn);Ca=b(tp,!1),tp.forEach(s),this.h()},h(){jn.a=null,l(x,"class","language-undefined"),i(F.src,za="fab13/01.png")||l(F,"src",za),l(F,"alt","successful data send"),is.a=null,l(G,"class","language-undefined"),i(q.src,Ja="fab13/02.jpg")||l(q,"src",Ja),l(q,"alt","DIY debug setup"),i(Z.src,$a="fab13/03.png")||l(Z,"src",$a),l(Z,"alt","Footprint of the input board"),i(tn.src,ct="fab13/04.jpg")||l(tn,"src",ct),l(tn,"alt","Oscilloscope screenshot"),i(k.src,lt="fab13/05r.mp4")||l(k,"src",lt),k.autoplay="autoplay",k.loop="loop",i(r.src,kt="fab13/06r.mp4")||l(r,"src",kt),r.autoplay="autoplay",r.loop="loop",i(d.src,gt="fab0/07r.mp4")||l(d,"src",gt),d.autoplay="autoplay",d.loop="loop",i(dn.src,vt="fab0/01.jpg")||l(dn,"src",vt),l(dn,"alt","breadboard resistor experiment"),i(m.src,Tt="fab0/06r.mp4")||l(m,"src",Tt),m.autoplay="autoplay",m.loop="loop",i(f.src,Bt="fab13/08r.mp4")||l(f,"src",Bt),f.autoplay="autoplay",f.loop="loop",na.a=null,l(In,"class","language-cpp"),aa.a=null,l(Tn,"class","language-cpp"),pa.a=null,l(Pn,"class","language-cpp"),i(Ln.src,Gt="fab13/s01.png")||l(Ln,"src",Gt),l(Ln,"alt","Bevy Hanabi example"),i(h.src,Nt="fab13/08r.mp4")||l(h,"src",Nt),h.autoplay="autoplay",h.loop="loop",ra.a=null,l(Hn,"class","language-rust"),ma.a=null,l(Dn,"class","language-rust"),ha.a=null,l(Rn,"class","language-rust"),ga.a=null,l(Fn,"class","language-rust"),va.a=null,l(Un,"class","language-rust"),Ca.a=null,l(Gn,"class","language-rust")},m(n,a){t(n,g,a),t(n,Vn,a),t(n,_,a),t(n,Nn,a),t(n,v,a),t(n,zn,a),t(n,x,a),jn.m(ep,x),t(n,qn,a),t(n,C,a),t(n,Xn,a),t(n,E,a),t(n,Yn,a),t(n,I,a),t(n,Zn,a),t(n,T,a),t(n,Jn,a),t(n,P,a),t(n,Qn,a),t(n,S,a),t(n,Kn,a),t(n,A,a),t(n,$n,a),t(n,L,a),t(n,ns,a),t(n,M,a),t(n,ss,a),t(n,B,a),t(n,as,a),t(n,H,a),t(n,ts,a),t(n,D,a),t(n,ps,a),t(n,R,a),t(n,es,a),t(n,O,a),t(n,os,a),t(n,W,a),t(n,cs,a),t(n,F,a),t(n,us,a),t(n,U,a),t(n,ls,a),t(n,G,a),is.m(op,G),t(n,ks,a),t(n,V,a),t(n,rs,a),t(n,N,a),t(n,ds,a),t(n,z,a),t(n,ms,a),t(n,j,a),t(n,fs,a),t(n,q,a),t(n,hs,a),t(n,X,a),t(n,ws,a),t(n,Y,a),t(n,ys,a),t(n,Z,a),t(n,bs,a),t(n,J,a),t(n,gs,a),t(n,Q,a),t(n,_s,a),t(n,K,a),t(n,vs,a),t(n,$,a),t(n,xs,a),t(n,nn,a),t(n,Cs,a),t(n,sn,a),t(n,Es,a),t(n,an,a),t(n,Is,a),t(n,tn,a),t(n,Ts,a),t(n,k,a),t(n,Ps,a),t(n,r,a),t(n,Ss,a),t(n,pn,a),t(n,As,a),t(n,en,a),t(n,Ls,a),t(n,on,a),t(n,Ms,a),t(n,cn,a),t(n,Bs,a),t(n,un,a),t(n,Hs,a),t(n,ln,a),t(n,Ds,a),t(n,kn,a),t(n,Rs,a),t(n,d,a),t(n,Os,a),t(n,rn,a),t(n,Ws,a),t(n,dn,a),t(n,Fs,a),t(n,mn,a),t(n,Us,a),t(n,fn,a),t(n,Gs,a),t(n,hn,a),t(n,Vs,a),t(n,m,a),t(n,Ns,a),t(n,wn,a),t(n,zs,a),t(n,yn,a),t(n,js,a),t(n,bn,a),t(n,qs,a),t(n,gn,a),t(n,Xs,a),t(n,f,a),t(n,Ys,a),t(n,_n,a),t(n,Zs,a),t(n,vn,a),t(n,Js,a),t(n,xn,a),t(n,Qs,a),t(n,Cn,a),t(n,Ks,a),t(n,En,a),t(n,$s,a),t(n,In,a),na.m(cp,In),t(n,sa,a),t(n,Tn,a),aa.m(up,Tn),t(n,ta,a),t(n,Pn,a),pa.m(lp,Pn),t(n,ea,a),t(n,Sn,a),t(n,oa,a),t(n,An,a),t(n,ca,a),t(n,Ln,a),t(n,ua,a),t(n,h,a),t(n,la,a),t(n,Mn,a),t(n,ia,a),t(n,Bn,a),t(n,ka,a),t(n,Hn,a),ra.m(ip,Hn),t(n,da,a),t(n,Dn,a),ma.m(kp,Dn),t(n,fa,a),t(n,Rn,a),ha.m(rp,Rn),t(n,wa,a),t(n,On,a),t(n,ya,a),t(n,Wn,a),t(n,ba,a),t(n,Fn,a),ga.m(dp,Fn),t(n,_a,a),t(n,Un,a),va.m(mp,Un),t(n,xa,a),t(n,Gn,a),Ca.m(fp,Gn)},p:Ea,i:Ea,o:Ea,d(n){n&&(s(g),s(Vn),s(_),s(Nn),s(v),s(zn),s(x),s(qn),s(C),s(Xn),s(E),s(Yn),s(I),s(Zn),s(T),s(Jn),s(P),s(Qn),s(S),s(Kn),s(A),s($n),s(L),s(ns),s(M),s(ss),s(B),s(as),s(H),s(ts),s(D),s(ps),s(R),s(es),s(O),s(os),s(W),s(cs),s(F),s(us),s(U),s(ls),s(G),s(ks),s(V),s(rs),s(N),s(ds),s(z),s(ms),s(j),s(fs),s(q),s(hs),s(X),s(ws),s(Y),s(ys),s(Z),s(bs),s(J),s(gs),s(Q),s(_s),s(K),s(vs),s($),s(xs),s(nn),s(Cs),s(sn),s(Es),s(an),s(Is),s(tn),s(Ts),s(k),s(Ps),s(r),s(Ss),s(pn),s(As),s(en),s(Ls),s(on),s(Ms),s(cn),s(Bs),s(un),s(Hs),s(ln),s(Ds),s(kn),s(Rs),s(d),s(Os),s(rn),s(Ws),s(dn),s(Fs),s(mn),s(Us),s(fn),s(Gs),s(hn),s(Vs),s(m),s(Ns),s(wn),s(zs),s(yn),s(js),s(bn),s(qs),s(gn),s(Xs),s(f),s(Ys),s(_n),s(Zs),s(vn),s(Js),s(xn),s(Qs),s(Cn),s(Ks),s(En),s($s),s(In),s(sa),s(Tn),s(ta),s(Pn),s(ea),s(Sn),s(oa),s(An),s(ca),s(Ln),s(ua),s(h),s(la),s(Mn),s(ia),s(Bn),s(ka),s(Hn),s(da),s(Dn),s(fa),s(Rn),s(wa),s(On),s(ya),s(Wn),s(ba),s(Fn),s(_a),s(Un),s(xa),s(Gn))}}}const vp={title:"Application Programming",date:"2024-05-05",description:"The thirteenth assignment.",categories:["projects"],tags:["digital-fabrication"],cover:"fab13/s01.png"};class xp extends wp{constructor(g){super(),yp(this,g,null,bp,hp,{})}}export{xp as default,vp as metadata};
