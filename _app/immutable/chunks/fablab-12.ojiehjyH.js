import{s as rt,e as l,a as s,H as pt,c as o,g as a,b as r,j as ht,k as ut,h as n,f as dt,i,n as F}from"./scheduler.WqRDolvd.js";import{S as ft,i as mt}from"./index.0NVKo1ab.js";function ct(st){let p,N="Table of Contents",I,h,J='<li><a href="#assignment">Assignment</a></li> <li><a href="#group">Group</a></li> <li><a href="#research">Research</a></li> <li><a href="#button-print">Button Print</a></li>',H,u,U="Assignment",L,d,k,at=`<code class="language-undefined">Group assignment

* Join a introduction session to get an overview of networking possibilities with XIAO ESP32
* Pick a group leader who is going to populate the group assignment page

Individual assignment

* Link to the group assignment page and describe what did you learn individually.
* Explore the WiFi capabilities of the XIAO ESP32C3 board.
* Plug it into one of the boards you produced earlier.
* Program the XIAO board to spawn an Access Point and create a simple REST API.
* The REST API should have endpoints for controlling output device(s) of your board as well as reading input.
* Document as you go and publish content on a page on your documentation website.</code>`,E,f,W="Group",S,m,K="Research",M,c,Q='Still going with Rust, building on the experience from the last two test programs on the <a href="fablab-08">ESP32-C3</a> and <a href="fablab-09">ESP32-S3</a> respectively. This week the intent was to get these boards to talk to each other. Simply, pressing the button on the C3 board should activate the motor on the S3 board.',A,w,V='Because of my choice of programming language, I couldn’t directly follow the instructions on the Xiao getting started guides. So my starting point was the <a href="https://github.com/esp-rs/awesome-esp-rust" rel="nofollow">Awesome ESP Rust</a> repository, which would hopefully have example projects.',j,v,Y='The relevant crate for wifi and so on is <a href="https://github.com/esp-rs/esp-wifi" rel="nofollow">esp-wifi</a>. It’s actual <a href="https://github.com/esp-rs/esp-wifi/blob/main/esp-wifi/README.md" rel="nofollow">README</a> is of course highly relevant.',R,x,Z='The crate has an <a href="https://github.com/esp-rs/esp-wifi/blob/main/esp-wifi/examples/access_point.rs" rel="nofollow">example for creating an Access Point</a>.',B,b,$="Let’s break down the task a bit. No need to immediately jump to board-to-board communication. Let’s first try to print a message to the computer screen every time the button is pressed.",X,g,tt="Button Print",D,C,et="The process to get code to compile was painful. There were so many errors and dead ends, and I was so tunnel-visioned to get it to work that I didn’t take time to document.",G,y,nt="I eventually did get the example codes from esp-wifi to compile and run, and I was able to connect the ESP32 to my wifi network. I didn’t manage, however, to do anything with that connection. I also tried running the bluetooth example, but couldn’t connect to the device. So I’m condensing maybe two days worth of work into these two disappointing paragraphs.",O,_,it='I looked elsewhere. I found <a href="https://dev.to/apollolabsbin/embedded-rust-bluetooth-on-esp-ble-scanner-1gb7" rel="nofollow">a tutorial series</a> that seemed promising. It was only under two months old and really in depth. The only downside was that there was seemingly no no_std option.',q,P,lt="I implemented the code for the unsecure BLE client. After lots of config and wrestling with the compiler:",z,T,ot="It seems like I managed to connect to the chip with my phone.";return{c(){p=l("h3"),p.textContent=N,I=s(),h=l("ul"),h.innerHTML=J,H=s(),u=l("h1"),u.textContent=U,L=s(),d=l("pre"),k=new pt(!1),E=s(),f=l("h1"),f.textContent=W,S=s(),m=l("h1"),m.textContent=K,M=s(),c=l("p"),c.innerHTML=Q,A=s(),w=l("p"),w.innerHTML=V,j=s(),v=l("p"),v.innerHTML=Y,R=s(),x=l("p"),x.innerHTML=Z,B=s(),b=l("p"),b.textContent=$,X=s(),g=l("h1"),g.textContent=tt,D=s(),C=l("p"),C.textContent=et,G=s(),y=l("p"),y.textContent=nt,O=s(),_=l("p"),_.innerHTML=it,q=s(),P=l("p"),P.textContent=lt,z=s(),T=l("p"),T.textContent=ot,this.h()},l(t){p=o(t,"H3",{"data-svelte-h":!0}),a(p)!=="svelte-sbwzft"&&(p.textContent=N),I=r(t),h=o(t,"UL",{"data-svelte-h":!0}),a(h)!=="svelte-6ulxad"&&(h.innerHTML=J),H=r(t),u=o(t,"H1",{"data-svelte-h":!0}),a(u)!=="svelte-g9rspt"&&(u.textContent=U),L=r(t),d=o(t,"PRE",{class:!0});var e=ht(d);k=ut(e,!1),e.forEach(n),E=r(t),f=o(t,"H1",{"data-svelte-h":!0}),a(f)!=="svelte-kxioer"&&(f.textContent=W),S=r(t),m=o(t,"H1",{"data-svelte-h":!0}),a(m)!=="svelte-1lm3rdx"&&(m.textContent=K),M=r(t),c=o(t,"P",{"data-svelte-h":!0}),a(c)!=="svelte-dgg4jp"&&(c.innerHTML=Q),A=r(t),w=o(t,"P",{"data-svelte-h":!0}),a(w)!=="svelte-neszod"&&(w.innerHTML=V),j=r(t),v=o(t,"P",{"data-svelte-h":!0}),a(v)!=="svelte-1ml3dqh"&&(v.innerHTML=Y),R=r(t),x=o(t,"P",{"data-svelte-h":!0}),a(x)!=="svelte-1thneiu"&&(x.innerHTML=Z),B=r(t),b=o(t,"P",{"data-svelte-h":!0}),a(b)!=="svelte-8e6n8y"&&(b.textContent=$),X=r(t),g=o(t,"H1",{"data-svelte-h":!0}),a(g)!=="svelte-x5ocs3"&&(g.textContent=tt),D=r(t),C=o(t,"P",{"data-svelte-h":!0}),a(C)!=="svelte-8inp2t"&&(C.textContent=et),G=r(t),y=o(t,"P",{"data-svelte-h":!0}),a(y)!=="svelte-hfpw0j"&&(y.textContent=nt),O=r(t),_=o(t,"P",{"data-svelte-h":!0}),a(_)!=="svelte-1ocimfj"&&(_.innerHTML=it),q=r(t),P=o(t,"P",{"data-svelte-h":!0}),a(P)!=="svelte-15hnhj6"&&(P.textContent=lt),z=r(t),T=o(t,"P",{"data-svelte-h":!0}),a(T)!=="svelte-pm6j9a"&&(T.textContent=ot),this.h()},h(){k.a=null,dt(d,"class","language-undefined")},m(t,e){i(t,p,e),i(t,I,e),i(t,h,e),i(t,H,e),i(t,u,e),i(t,L,e),i(t,d,e),k.m(at,d),i(t,E,e),i(t,f,e),i(t,S,e),i(t,m,e),i(t,M,e),i(t,c,e),i(t,A,e),i(t,w,e),i(t,j,e),i(t,v,e),i(t,R,e),i(t,x,e),i(t,B,e),i(t,b,e),i(t,X,e),i(t,g,e),i(t,D,e),i(t,C,e),i(t,G,e),i(t,y,e),i(t,O,e),i(t,_,e),i(t,q,e),i(t,P,e),i(t,z,e),i(t,T,e)},p:F,i:F,o:F,d(t){t&&(n(p),n(I),n(h),n(H),n(u),n(L),n(d),n(E),n(f),n(S),n(m),n(M),n(c),n(A),n(w),n(j),n(v),n(R),n(x),n(B),n(b),n(X),n(g),n(D),n(C),n(G),n(y),n(O),n(_),n(q),n(P),n(z),n(T))}}}const xt={title:"Networking",date:"2024-05-05",description:"The twelfth assignment.",categories:["projects"],tags:["digital-fabrication"],cover:"fab11/01.png"};class bt extends ft{constructor(p){super(),mt(this,p,null,ct,rt,{})}}export{bt as default,xt as metadata};
